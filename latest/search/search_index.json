{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"kiara plugin: core-types","text":"<p>This package contains a set of commonly used/useful modules, pipelines, types and metadata schemas for Kiara.</p>"},{"location":"#description","title":"Description","text":"<p>Core data types for kiara.</p>"},{"location":"#package-content","title":"Package content","text":""},{"location":"#data_types","title":"data_types","text":"<ul> <li> <p><code>integer</code>: An integer.</p> </li> <li> <p><code>float</code>: A float.</p> </li> <li> <p><code>date</code>: A date.</p> </li> <li> <p><code>list</code>: A list.</p> </li> <li> <p><code>kiara_model</code>: A model.</p> </li> <li> <p><code>kiara_model_list</code>: A model.</p> </li> </ul>"},{"location":"#module_types","title":"module_types","text":"<ul> <li> <p><code>string.filters</code>: -- n/a --</p> </li> <li> <p><code>load.kiara_model</code>: -- n/a --</p> </li> <li> <p><code>load.kiara_model_list</code>: -- n/a --</p> </li> <li> <p><code>logic.not</code>: Negates the input.</p> </li> <li> <p><code>logic.and</code>: Returns 'True' if both inputs are 'True'.</p> </li> <li> <p><code>logic.or</code>: Returns 'True' if one of the inputs is 'True'.</p> </li> <li> <p><code>date.extract_from_string</code>: Extract a date object from a string.</p> </li> <li> <p><code>date.check_range</code>: Check whether a date falls within a specified date range.</p> </li> <li> <p><code>list.contains</code>: Check whether an element is in a list.</p> </li> <li> <p><code>string.match_regex</code>: Match a string using a regular expression.</p> </li> <li> <p><code>string.replace</code>: Replace a string if it matches a key in a mapping dictionary.</p> </li> </ul>"},{"location":"#kiara_model_types","title":"kiara_model_types","text":"<ul> <li> <p><code>kiara_model_schema_metadata</code>: File stats.</p> </li> <li> <p><code>kiara_model_list_metadata</code>: File stats.</p> </li> </ul>"},{"location":"#operations","title":"operations","text":"<ul> <li> <p><code>date.check_range</code>: Check whether a date falls within a specified date range.</p> </li> <li> <p><code>date.extract_from_string</code>: Extract a date object from a string.</p> </li> <li> <p><code>deserialize.kiara_model.as.python_object</code>: -- n/a --</p> </li> <li> <p><code>deserialize.kiara_model_list.as.python_object</code>: -- n/a --</p> </li> <li> <p><code>list.contains</code>: Check whether an element is in a list.</p> </li> <li> <p><code>logic.and</code>: Returns 'True' if both inputs are 'True'.</p> </li> <li> <p><code>logic.nand</code>: Returns 'False' if both inputs are 'True'.</p> </li> <li> <p><code>logic.nor</code>: Returns 'True' if both inputs are 'False'.</p> </li> <li> <p><code>logic.not</code>: Negates the input.</p> </li> <li> <p><code>logic.or</code>: Returns 'True' if one of the inputs is 'True'.</p> </li> <li> <p><code>logic.xor</code>: Returns 'True' if exactly one of it's two inputs is 'True'.</p> </li> <li> <p><code>string_filter.tokens</code>: -- n/a --</p> </li> </ul>"},{"location":"#links","title":"Links","text":"<ul> <li>Documentation: https://DHARPA-Project.github.io/kiara_plugin.core_types</li> <li>Code: https://github.com/DHARPA-Project/kiara_plugin.core_types</li> </ul>"},{"location":"SUMMARY/","title":"SUMMARY","text":"<ul> <li>Home</li> <li>Usage</li> <li>Package contents</li> <li>API reference</li> </ul>"},{"location":"usage/","title":"Usage","text":"<p>TO BE DONE</p>"},{"location":"info/SUMMARY/","title":"SUMMARY","text":"<ul> <li>data_types</li> <li>module_types</li> <li>kiara_model_types</li> <li>operations</li> </ul>"},{"location":"info/data_types/","title":"data_types","text":""},{"location":"info/data_types/#kiara_info.data_types.integer","title":"<code>integer</code>","text":"<pre>                                                                                \n lineage              integer                                                   \n                      any                                                       \n qualifier profile(s) -- n/a --                                                 \n Documentation                                                                  \n    An integer.                                             \n                     Author(s)                                                                      \n    Markus Binsteiner   markus@frkl.io                      \n Context                                                                        \n  Tags         core_types                                 \n                      Labels       package: kiara_plugin.core_types           \n                      References   source_repo:                               \n                     https://github.com/DHARPA-Project/kiara\u2026   \n documentation:                             \n                     https://DHARPA-Project.github.io/kiara_\u2026   \n Python class                                                                   \n  python_class_name    IntegerType                        \n                      python_module_name   kiara_plugin.core_types.data_ty\u2026   \n                      full_name            kiara_plugin.core_types.data_ty\u2026   \n                     Config class                                                                   \n  python_class_name    DataTypeConfig                     \n                      python_module_name   kiara.data_types                   \n                      full_name            kiara.data_types.DataTypeConfig    \n                     Value class                                                                    \n  python_class_name    int                                \n                      python_module_name   builtins                           \n                      full_name            int                                \n                     </pre>"},{"location":"info/data_types/#kiara_info.data_types.float","title":"<code>float</code>","text":"<pre>                                                                                \n lineage              float                                                     \n                      any                                                       \n qualifier profile(s) -- n/a --                                                 \n Documentation                                                                  \n    A float.                                                \n                     Author(s)                                                                      \n    Markus Binsteiner   markus@frkl.io                      \n Context                                                                        \n  Tags         core_types                                 \n                      Labels       package: kiara_plugin.core_types           \n                      References   source_repo:                               \n                     https://github.com/DHARPA-Project/kiara\u2026   \n documentation:                             \n                     https://DHARPA-Project.github.io/kiara_\u2026   \n Python class                                                                   \n  python_class_name    FloatType                          \n                      python_module_name   kiara_plugin.core_types.data_ty\u2026   \n                      full_name            kiara_plugin.core_types.data_ty\u2026   \n                     Config class                                                                   \n  python_class_name    DataTypeConfig                     \n                      python_module_name   kiara.data_types                   \n                      full_name            kiara.data_types.DataTypeConfig    \n                     Value class                                                                    \n  python_class_name    float                              \n                      python_module_name   builtins                           \n                      full_name            float                              \n                     </pre>"},{"location":"info/data_types/#kiara_info.data_types.date","title":"<code>date</code>","text":"<pre>                                                                                \n lineage              date                                                      \n                      any                                                       \n qualifier profile(s) -- n/a --                                                 \n Documentation                                                                  \n    A date.                                                 \n                        Internally, this will always be represented as a        \n                        Python datetime object. Iff provided as input, it can   \n                        also be as string, in which case the                    \n                     dateutils.parser.parse method will be used to parse     \n                        the string into a datetime object.                      \n                     Author(s)                                                                      \n    Markus Binsteiner   markus@frkl.io                      \n Context                                                                        \n  Tags         core_types                                 \n                      Labels       package: kiara_plugin.core_types           \n                      References   source_repo:                               \n                     https://github.com/DHARPA-Project/kiara\u2026   \n documentation:                             \n                     https://DHARPA-Project.github.io/kiara_\u2026   \n Python class                                                                   \n  python_class_name    DateType                           \n                      python_module_name   kiara_plugin.core_types.data_ty\u2026   \n                      full_name            kiara_plugin.core_types.data_ty\u2026   \n                     Config class                                                                   \n  python_class_name    DataTypeConfig                     \n                      python_module_name   kiara.data_types                   \n                      full_name            kiara.data_types.DataTypeConfig    \n                     Value class                                                                    \n  python_class_name    datetime                           \n                      python_module_name   datetime                           \n                      full_name            datetime.datetime                  \n                     </pre>"},{"location":"info/data_types/#kiara_info.data_types.list","title":"<code>list</code>","text":"<pre>                                                                                \n lineage              list                                                      \n                      any                                                       \n qualifier profile(s) -- n/a --                                                 \n Documentation                                                                  \n    A list.                                                 \n                        Backed by the                                           \n                        [kiara_plugin.core_types.models.ListModel] class,       \n                        this data type allows to (optionally) specify a         \n                        schema for the items in the list.                       \n                     Author(s)                                                                      \n    Markus Binsteiner   markus@frkl.io                      \n Context                                                                        \n  Tags         core_types                                 \n                      Labels       package: kiara_plugin.core_types           \n                      References   source_repo:                               \n                     https://github.com/DHARPA-Project/kiara\u2026   \n documentation:                             \n                     https://DHARPA-Project.github.io/kiara_\u2026   \n Python class                                                                   \n  python_class_name    ListValueType                      \n                      python_module_name   kiara_plugin.core_types.data_ty\u2026   \n                      full_name            kiara_plugin.core_types.data_ty\u2026   \n                     Config class                                                                   \n  python_class_name    DataTypeConfig                     \n                      python_module_name   kiara.data_types                   \n                      full_name            kiara.data_types.DataTypeConfig    \n                     Value class                                                                    \n  python_class_name    KiaraList                          \n                      python_module_name   kiara_plugin.core_types.models     \n                      full_name            kiara_plugin.core_types.models.\u2026   \n                     </pre>"},{"location":"info/data_types/#kiara_info.data_types.kiara_model","title":"<code>kiara_model</code>","text":"<pre>                                                                                \n lineage              kiara_model                                               \n                      any                                                       \n qualifier profile(s) -- n/a --                                                 \n Documentation                                                                  \n    A model.                                                \n                     Author(s)                                                                      \n    Markus Binsteiner   markus@frkl.io                      \n Context                                                                        \n  Tags         core_types                                 \n                      Labels       package: kiara_plugin.core_types           \n                      References   source_repo:                               \n                     https://github.com/DHARPA-Project/kiara\u2026   \n documentation:                             \n                     https://DHARPA-Project.github.io/kiara_\u2026   \n Python class                                                                   \n  python_class_name    KiaraModelType                     \n                      python_module_name   kiara_plugin.core_types.data_ty\u2026   \n                      full_name            kiara_plugin.core_types.data_ty\u2026   \n                     Config class                                                                   \n  python_class_name    KiaraModelTypeConfig               \n                      python_module_name   kiara_plugin.core_types.data_ty\u2026   \n                      full_name            kiara_plugin.core_types.data_ty\u2026   \n                     Value class                                                                    \n  python_class_name    KiaraModel                         \n                      python_module_name   kiara.models                       \n                      full_name            kiara.models.KiaraModel            \n                     </pre>"},{"location":"info/data_types/#kiara_info.data_types.kiara_model_list","title":"<code>kiara_model_list</code>","text":"<pre>                                                                                \n lineage              kiara_model_list                                          \n                      any                                                       \n qualifier profile(s) -- n/a --                                                 \n Documentation                                                                  \n    A model.                                                \n                     Author(s)                                                                      \n    Markus Binsteiner   markus@frkl.io                      \n Context                                                                        \n  Tags         core_types                                 \n                      Labels       package: kiara_plugin.core_types           \n                      References   source_repo:                               \n                     https://github.com/DHARPA-Project/kiara\u2026   \n documentation:                             \n                     https://DHARPA-Project.github.io/kiara_\u2026   \n Python class                                                                   \n  python_class_name    KiaraModelListType                 \n                      python_module_name   kiara_plugin.core_types.data_ty\u2026   \n                      full_name            kiara_plugin.core_types.data_ty\u2026   \n                     Config class                                                                   \n  python_class_name    KiaraModelTypeConfig               \n                      python_module_name   kiara_plugin.core_types.data_ty\u2026   \n                      full_name            kiara_plugin.core_types.data_ty\u2026   \n                     Value class                                                                    \n  python_class_name    KiaraModelList                     \n                      python_module_name   kiara_plugin.core_types.data_ty\u2026   \n                      full_name            kiara_plugin.core_types.data_ty\u2026   \n                     </pre>"},{"location":"info/kiara_model_types/","title":"kiara_model_types","text":""},{"location":"info/kiara_model_types/#kiara_info.kiara_model_types.kiara_model_schema_metadata","title":"<code>kiara_model_schema_metadata</code>","text":"<pre>                                                                                \n Documentation                                                                  \n    File stats.                                                    \n              Author(s)                                                                      \n    Markus Binsteiner   markus@frkl.io                             \n Context                                                                        \n  Tags         core_types                                        \n               Labels       package: kiara_plugin.core_types                  \n               References   source_repo:                                      \n              https://github.com/DHARPA-Project/kiara_plugin\u2026   \n documentation:                                    \n              https://DHARPA-Project.github.io/kiara_plugin.\u2026   \n Python class                                                                   \n  python_class_name    KiaraModelSchemaMetadata                  \n               python_module_name   kiara_plugin.core_types.models            \n               full_name            kiara_plugin.core_types.models.KiaraMo\u2026   \n              </pre>"},{"location":"info/kiara_model_types/#kiara_info.kiara_model_types.kiara_model_list_metadata","title":"<code>kiara_model_list_metadata</code>","text":"<pre>                                                                                \n Documentation                                                                  \n    File stats.                                                    \n              Author(s)                                                                      \n    Markus Binsteiner   markus@frkl.io                             \n Context                                                                        \n  Tags         core_types                                        \n               Labels       package: kiara_plugin.core_types                  \n               References   source_repo:                                      \n              https://github.com/DHARPA-Project/kiara_plugin\u2026   \n documentation:                                    \n              https://DHARPA-Project.github.io/kiara_plugin.\u2026   \n Python class                                                                   \n  python_class_name    KiaraModelListMetadata                    \n               python_module_name   kiara_plugin.core_types.models            \n               full_name            kiara_plugin.core_types.models.KiaraMo\u2026   \n              </pre>"},{"location":"info/module_types/","title":"module_types","text":""},{"location":"info/module_types/#kiara_info.module_types.string.filters","title":"<code>string.filters</code>","text":"<pre>                                                                                \n Documentation                                                                  \n    -- n/a --                                             \n                       Author(s)                                                                      \n    Markus Binsteiner   markus@frkl.io                    \n Context                                                                        \n  Tags         core_types                               \n                        Labels       package: kiara_plugin.core_types         \n                        References   source_repo:                             \n                       https://github.com/DHARPA-Project/kia\u2026   \n documentation:                           \n                       https://DHARPA-Project.github.io/kiar\u2026   \n Module config schema                                                           \n  Field       Type     Descript\u2026   Required   Default   \n   \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \n                          constants   object   Value       no                   \n                                               constants                        \n                                               for this                         \n                                               module.                          \n                          defaults    object   Value       no                   \n                                               defaults                         \n                                               for this                         \n                                               module.                          \n                          filter_n\u2026   string   The name    yes                  \n                                               of the                           \n                                               filter.                          \n                       Python class                                                                   \n  python_class_name    StringFiltersModule              \n                        python_module_name   kiara_plugin.core_types.modul\u2026   \n                        full_name            kiara_plugin.core_types.modul\u2026   \n                       Processing source code  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \n                       class StringFiltersModule(FilterModule):              \n     _module_type_name = \"string.filters\"              \n @classmethod                                      \n def retrieve_supported_type(cls) -&gt; Union[Dict\u2026   \n return \"string\"                               \n def create_filter_inputs(self, filter_name: st\u2026   \n if filter_name == \"tokens\":                   \n return {                                  \n \"filter_tokens\": {                    \n \"type\": \"list\",                   \n \"doc\": \"A list of tokens to fi\u2026   \n \"optional\": True,                 \n                 },                                    \n \"replacement\": {                      \n \"type\": \"string\",                 \n \"doc\": \"The string to replace \u2026   \n \"default\": \"\",                    \n                 },                                    \n             }                                         \n return None                                   \n def filter__tokens(self, value: Value, filter_\u2026   \n         tokens = filter_inputs.get(\"filter_tokens\"\u2026   \n if not tokens:                                \n return None                               \n         repl = filter_inputs.get(\"replacement\")       \n         result: str = value.data                      \n for token in tokens:                          \n             result = result.replace(token, repl)  \u2026   \n return result                                 \n   \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \n                                                                                \n</pre>"},{"location":"info/module_types/#kiara_info.module_types.load.kiara_model","title":"<code>load.kiara_model</code>","text":"<pre>                                                                                \n Documentation                                                                  \n    -- n/a --                                             \n                       Author(s)                                                                      \n    Markus Binsteiner   markus@frkl.io                    \n Context                                                                        \n  Tags         core_types                               \n                        Labels       package: kiara_plugin.core_types         \n                        References   source_repo:                             \n                       https://github.com/DHARPA-Project/kia\u2026   \n documentation:                           \n                       https://DHARPA-Project.github.io/kiar\u2026   \n Module config schema                                                           \n  Field       Type     Descript\u2026   Required   Default   \n   \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \n                          constants   object   Value       no                   \n                                               constants                        \n                                               for this                         \n                                               module.                          \n                          defaults    object   Value       no                   \n                                               defaults                         \n                                               for this                         \n                                               module.                          \n                          serializ\u2026   string   The name    yes                  \n                                               of the                           \n                                               serializ\u2026                        \n                                               profile                          \n                                               used to                          \n                                               serialize                        \n                                               the                              \n                                               source                           \n                                               value.                           \n                          target_p\u2026   string   The         yes                  \n                                               profile                          \n                                               name of                          \n                                               the                              \n                                               de-seria\u2026                        \n                                               result                           \n                                               data.                            \n                          value_ty\u2026   string   The value   yes                  \n                                               type of                          \n                                               the                              \n                                               actual                           \n                                               (unseria\u2026                        \n                                               value.                           \n                       Python class                                                                   \n  python_class_name    LoadKiaraModel                   \n                        python_module_name   kiara_plugin.core_types.modul\u2026   \n                        full_name            kiara_plugin.core_types.modul\u2026   \n                       Processing source code  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \n                       class LoadKiaraModel(DeserializeValueModule):         \n     _module_type_name = \"load.kiara_model\"            \n @classmethod                                      \n def retrieve_supported_target_profiles(cls) -&gt;\u2026   \n return {\"python_object\": KiaraModel}          \n @classmethod                                      \n def retrieve_supported_serialization_profile(c\u2026   \n return \"json\"                                 \n @classmethod                                      \n def retrieve_serialized_value_type(cls) -&gt; str:   \n return \"kiara_model\"                          \n def to__python_object(self, data: SerializedDa\u2026   \n         chunks = data.get_serialized_data(\"data\")     \n assert chunks.get_number_of_chunks() == 1     \n         _chunks = list(chunks.get_chunks(as_files=\u2026   \n assert len(_chunks) == 1                      \n         bytes_string: bytes = _chunks[0]  # type: \u2026   \n         model_data = orjson.loads(bytes_string)       \n         model_id: str = data.data_type_config[\"kia\u2026   \n         model_registry = ModelRegistry.instance()     \n         m_cls = model_registry.get_model_cls(kiara\u2026   \n         obj = m_cls(**model_data)                     \n return obj                                    \n   \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \n                                                                                \n</pre>"},{"location":"info/module_types/#kiara_info.module_types.load.kiara_model_list","title":"<code>load.kiara_model_list</code>","text":"<pre>                                                                                \n Documentation                                                                  \n    -- n/a --                                             \n                       Author(s)                                                                      \n    Markus Binsteiner   markus@frkl.io                    \n Context                                                                        \n  Tags         core_types                               \n                        Labels       package: kiara_plugin.core_types         \n                        References   source_repo:                             \n                       https://github.com/DHARPA-Project/kia\u2026   \n documentation:                           \n                       https://DHARPA-Project.github.io/kiar\u2026   \n Module config schema                                                           \n  Field       Type     Descript\u2026   Required   Default   \n   \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \n                          constants   object   Value       no                   \n                                               constants                        \n                                               for this                         \n                                               module.                          \n                          defaults    object   Value       no                   \n                                               defaults                         \n                                               for this                         \n                                               module.                          \n                          serializ\u2026   string   The name    yes                  \n                                               of the                           \n                                               serializ\u2026                        \n                                               profile                          \n                                               used to                          \n                                               serialize                        \n                                               the                              \n                                               source                           \n                                               value.                           \n                          target_p\u2026   string   The         yes                  \n                                               profile                          \n                                               name of                          \n                                               the                              \n                                               de-seria\u2026                        \n                                               result                           \n                                               data.                            \n                          value_ty\u2026   string   The value   yes                  \n                                               type of                          \n                                               the                              \n                                               actual                           \n                                               (unseria\u2026                        \n                                               value.                           \n                       Python class                                                                   \n  python_class_name    LoadKiaraModelList               \n                        python_module_name   kiara_plugin.core_types.modul\u2026   \n                        full_name            kiara_plugin.core_types.modul\u2026   \n                       Processing source code  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \n                       class LoadKiaraModelList(DeserializeValueModule):     \n     _module_type_name = \"load.kiara_model_list\"       \n @classmethod                                      \n def retrieve_supported_target_profiles(cls) -&gt;\u2026   \n return {\"python_object\": KiaraModelList}      \n @classmethod                                      \n def retrieve_supported_serialization_profile(c\u2026   \n return \"json\"                                 \n @classmethod                                      \n def retrieve_serialized_value_type(cls) -&gt; str:   \n return \"kiara_model_list\"                     \n def to__python_object(self, data: SerializedDa\u2026   \n         model_id: str = data.data_type_config[\"kia\u2026   \n         model_registry = ModelRegistry.instance()     \n         m_cls = model_registry.get_model_cls(kiara\u2026   \n         items = []                                    \n for chunk_id in sorted(data.get_keys()):      \n             chunks = data.get_serialized_data(chun\u2026   \n assert chunks.get_number_of_chunks() =\u2026   \n             _chunks = list(chunks.get_chunks(as_fi\u2026   \n assert len(_chunks) == 1                  \n             bytes_string: bytes = _chunks[0]  # ty\u2026   \n             model_data = orjson.loads(bytes_string)   \n             _obj = m_cls(**model_data)                \n             items.append(_obj)                        \n         obj: KiaraModelList[KiaraModel] = KiaraMod\u2026   \n             list_items=items, kiara_model_id=model\u2026   \n         )                                             \n return obj                                    \n   \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \n                                                                                \n</pre>"},{"location":"info/module_types/#kiara_info.module_types.logic.not","title":"<code>logic.not</code>","text":"<pre>                                                                                \n Documentation                                                                  \n    Negates the input.                                    \n                       Author(s)                                                                      \n    Markus Binsteiner   markus@frkl.io                    \n Context                                                                        \n  Tags         core_types                               \n                        Labels       package: kiara_plugin.core_types         \n                        References   source_repo:                             \n                       https://github.com/DHARPA-Project/kia\u2026   \n documentation:                           \n                       https://DHARPA-Project.github.io/kiar\u2026   \n Module config schema                                                           \n  Field       Type     Descript\u2026   Required   Default   \n   \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \n                          constants   object   Value       no                   \n                                               constants                        \n                                               for this                         \n                                               module.                          \n                          defaults    object   Value       no                   \n                                               defaults                         \n                                               for this                         \n                                               module.                          \n                          delay       number   the delay   no         0         \n                                               in                               \n                                               seconds                          \n                                               from                             \n                                               processi\u2026                        \n                                               start to                         \n                                               when the                         \n                                               output is                        \n                                               returned.                        \n                       Python class                                                                   \n  python_class_name    NotModule                        \n                        python_module_name   kiara_plugin.core_types.modul\u2026   \n                        full_name            kiara_plugin.core_types.modul\u2026   \n                       Processing source code  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \n                       class NotModule(LogicProcessingModule):               \n \"\"\"Negates the input.\"\"\"                          \n     _module_type_name = \"logic.not\"                   \n def create_inputs_schema(                         \n         self,                                         \n     ) -&gt; ValueMapSchema:                              \n \"\"\"The not module only has one input, a bo\u2026   \n return {                                      \n \"a\": {\"type\": \"boolean\", \"doc\": \"A boo\u2026   \n         }                                             \n def create_outputs_schema(                        \n         self,                                         \n     ) -&gt; ValueMapSchema:                              \n \"\"\"The output of this module is a single b\u2026   \n return {                                      \n \"y\": {                                    \n \"type\": \"boolean\",                    \n \"doc\": \"A boolean describing the m\u2026   \n             }                                         \n         }                                             \n def process(self, inputs: ValueMap, outputs: V\u2026   \n \"\"\"Negates the input boolean.\"\"\"              \n         time.sleep(self.config.get(\"delay\"))  # ty\u2026   \n         outputs.set_value(\"y\", not inputs.get_valu\u2026   \n   \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \n                                                                                \n</pre>"},{"location":"info/module_types/#kiara_info.module_types.logic.and","title":"<code>logic.and</code>","text":"<pre>                                                                                \n Documentation                                                                  \n    Returns 'True' if both inputs are 'True'.             \n                       Author(s)                                                                      \n    Markus Binsteiner   markus@frkl.io                    \n Context                                                                        \n  Tags         core_types                               \n                        Labels       package: kiara_plugin.core_types         \n                        References   source_repo:                             \n                       https://github.com/DHARPA-Project/kia\u2026   \n documentation:                           \n                       https://DHARPA-Project.github.io/kiar\u2026   \n Module config schema                                                           \n  Field       Type     Descript\u2026   Required   Default   \n   \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \n                          constants   object   Value       no                   \n                                               constants                        \n                                               for this                         \n                                               module.                          \n                          defaults    object   Value       no                   \n                                               defaults                         \n                                               for this                         \n                                               module.                          \n                          delay       number   the delay   no         0         \n                                               in                               \n                                               seconds                          \n                                               from                             \n                                               processi\u2026                        \n                                               start to                         \n                                               when the                         \n                                               output is                        \n                                               returned.                        \n                       Python class                                                                   \n  python_class_name    AndModule                        \n                        python_module_name   kiara_plugin.core_types.modul\u2026   \n                        full_name            kiara_plugin.core_types.modul\u2026   \n                       Processing source code  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \n                       class AndModule(LogicProcessingModule):               \n \"\"\"Returns 'True' if both inputs are 'True'.\"\"\"   \n     _module_type_name = \"logic.and\"                   \n def create_inputs_schema(                         \n         self,                                         \n     ) -&gt; ValueMapSchema:                              \n return {                                      \n \"a\": {\"type\": \"boolean\", \"doc\": \"A boo\u2026   \n \"b\": {\"type\": \"boolean\", \"doc\": \"A boo\u2026   \n         }                                             \n def create_outputs_schema(                        \n         self,                                         \n     ) -&gt; ValueMapSchema:                              \n return {                                      \n \"y\": {                                    \n \"type\": \"boolean\",                    \n \"doc\": \"A boolean describing the m\u2026   \n             }                                         \n         }                                             \n def process(self, inputs: ValueMap, outputs: V\u2026   \n         time.sleep(self.config.delay)  # type: ign\u2026   \n         outputs.set_value(                            \n \"y\", inputs.get_value_data(\"a\") and in\u2026   \n         )                                             \n   \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \n                                                                                \n</pre>"},{"location":"info/module_types/#kiara_info.module_types.logic.or","title":"<code>logic.or</code>","text":"<pre>                                                                                \n Documentation                                                                  \n    Returns 'True' if one of the inputs is 'True'.        \n                       Author(s)                                                                      \n    Markus Binsteiner   markus@frkl.io                    \n Context                                                                        \n  Tags         core_types                               \n                        Labels       package: kiara_plugin.core_types         \n                        References   source_repo:                             \n                       https://github.com/DHARPA-Project/kia\u2026   \n documentation:                           \n                       https://DHARPA-Project.github.io/kiar\u2026   \n Module config schema                                                           \n  Field       Type     Descript\u2026   Required   Default   \n   \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \n                          constants   object   Value       no                   \n                                               constants                        \n                                               for this                         \n                                               module.                          \n                          defaults    object   Value       no                   \n                                               defaults                         \n                                               for this                         \n                                               module.                          \n                          delay       number   the delay   no         0         \n                                               in                               \n                                               seconds                          \n                                               from                             \n                                               processi\u2026                        \n                                               start to                         \n                                               when the                         \n                                               output is                        \n                                               returned.                        \n                       Python class                                                                   \n  python_class_name    OrModule                         \n                        python_module_name   kiara_plugin.core_types.modul\u2026   \n                        full_name            kiara_plugin.core_types.modul\u2026   \n                       Processing source code  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \n                       class OrModule(LogicProcessingModule):                \n \"\"\"Returns 'True' if one of the inputs is 'Tru\u2026   \n     _module_type_name = \"logic.or\"                    \n def create_inputs_schema(                         \n         self,                                         \n     ) -&gt; ValueMapSchema:                              \n return {                                      \n \"a\": {\"type\": \"boolean\", \"doc\": \"A boo\u2026   \n \"b\": {\"type\": \"boolean\", \"doc\": \"A boo\u2026   \n         }                                             \n def create_outputs_schema(                        \n         self,                                         \n     ) -&gt; ValueMapSchema:                              \n return {                                      \n \"y\": {                                    \n \"type\": \"boolean\",                    \n \"doc\": \"A boolean describing the m\u2026   \n             }                                         \n         }                                             \n def process(self, inputs: ValueMap, outputs: V\u2026   \n         time.sleep(self.config.get(\"delay\"))  # ty\u2026   \n         outputs.set_value(\"y\", inputs.get_value_da\u2026   \n   \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \n                                                                                \n</pre>"},{"location":"info/module_types/#kiara_info.module_types.date.extract_from_string","title":"<code>date.extract_from_string</code>","text":"<pre>                                                                                \n Documentation                                                                  \n    Extract a date object from a string.                  \n                          This module is very bare bones so far, only using     \n                          the standard parser from the dateutil package to      \n                          parse strings into dates.                             \n                       Author(s)                                                                      \n    Markus Binsteiner   markus@frkl.io                    \n Context                                                                        \n  Tags         core_types                               \n                        Labels       package: kiara_plugin.core_types         \n                        References   source_repo:                             \n                       https://github.com/DHARPA-Project/kia\u2026   \n documentation:                           \n                       https://DHARPA-Project.github.io/kiar\u2026   \n Module config schema                                                           \n  Field       Type     Descript\u2026   Required   Default   \n   \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \n                          constants   object   Value       no                   \n                                               constants                        \n                                               for this                         \n                                               module.                          \n                          defaults    object   Value       no                   \n                                               defaults                         \n                                               for this                         \n                                               module.                          \n                       Python class                                                                   \n  python_class_name    ExtractDateModule                \n                        python_module_name   kiara_plugin.core_types.modul\u2026   \n                        full_name            kiara_plugin.core_types.modul\u2026   \n                       Processing source code  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \n                       class ExtractDateModule(KiaraModule):                 \n \"\"\"Extract a date object from a string.           \n     This module is very bare bones so far, only us\u2026   \n     [dateutil](https://github.com/dateutil/dateuti\u2026   \n     \"\"\"                                               \n     _module_type_name = \"date.extract_from_string\"    \n def create_inputs_schema(                         \n         self,                                         \n     ) -&gt; ValueMapSchema:                              \n return {\"text\": {\"type\": \"string\", \"doc\": \u2026   \n def create_outputs_schema(                        \n         self,                                         \n     ) -&gt; ValueMapSchema:                              \n return {                                      \n \"date\": {\"type\": \"date\", \"doc\": \"The d\u2026   \n         }                                             \n def process(self, inputs: ValueMap, outputs: V\u2026   \n from dateutil import parser                   \n         text = inputs.get_value_data(\"text\")          \n # date_match = re.findall(r\"_(\\d{4}-\\d{2}-\u2026   \n # assert date_match                           \n # d_obj = parser.parse(date_match[0])  # t\u2026   \n         d_obj = parser.parse(text, fuzzy=True)        \n         outputs.set_value(\"date\", d_obj)              \n   \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \n                                                                                \n</pre>"},{"location":"info/module_types/#kiara_info.module_types.date.check_range","title":"<code>date.check_range</code>","text":"<pre>                                                                                \n Documentation                                                                  \n    Check whether a date falls within a specified date    \n                          range.                                                \n                          If none one of the inputs 'earliest' or 'latest' is   \n                          set, this module will always return 'True'.           \n                          Return True if that's the case, otherwise False.      \n                       Author(s)                                                                      \n    Markus Binsteiner   markus@frkl.io                    \n Context                                                                        \n  Tags         core_types                               \n                        Labels       package: kiara_plugin.core_types         \n                        References   source_repo:                             \n                       https://github.com/DHARPA-Project/kia\u2026   \n documentation:                           \n                       https://DHARPA-Project.github.io/kiar\u2026   \n Module config schema                                                           \n  Field       Type     Descript\u2026   Required   Default   \n   \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \n                          constants   object   Value       no                   \n                                               constants                        \n                                               for this                         \n                                               module.                          \n                          defaults    object   Value       no                   \n                                               defaults                         \n                                               for this                         \n                                               module.                          \n                       Python class                                                                   \n  python_class_name    DateRangeCheckModule             \n                        python_module_name   kiara_plugin.core_types.modul\u2026   \n                        full_name            kiara_plugin.core_types.modul\u2026   \n                       Processing source code  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \n                       class DateRangeCheckModule(KiaraModule):              \n \"\"\"Check whether a date falls within a specifi\u2026   \n     If none one of the inputs 'earliest' or 'lates\u2026   \n     Return ``True`` if that's the case, otherwise \u2026   \n     \"\"\"                                               \n     _module_type_name = \"date.check_range\"            \n def create_inputs_schema(                         \n         self,                                         \n     ) -&gt; ValueMapSchema:                              \n         inputs: Dict[str, Dict[str, Any]] = {         \n \"date\": {\"type\": \"date\", \"doc\": \"The d\u2026   \n \"earliest\": {                             \n \"type\": \"date\",                       \n \"doc\": \"The earliest date that is \u2026   \n \"optional\": True,                     \n             },                                        \n \"latest\": {                               \n \"type\": \"date\",                       \n \"doc\": \"The latest date that is al\u2026   \n \"optional\": True,                     \n             },                                        \n         }                                             \n return inputs                                 \n def create_outputs_schema(                        \n         self,                                         \n     ) -&gt; ValueMapSchema:                              \n         outputs = {                                   \n \"within_range\": {                         \n \"type\": \"boolean\",                    \n \"doc\": \"A boolean indicating wheth\u2026   \n             }                                         \n         }                                             \n return outputs                                \n def process(self, inputs: ValueMap, outputs: V\u2026   \n         d: datetime.datetime = inputs.get_value_da\u2026   \n         earliest: Union[datetime.datetime, None] =\u2026   \n         latest: Union[datetime.datetime, None] = i\u2026   \n if not earliest and not latest:               \n             outputs.set_value(\"within_range\", True)   \n return                                    \n if not isinstance(d, datetime.datetime):      \n raise KiaraProcessingException(f\"Inval\u2026   \n if earliest and latest:                       \n             matches = earliest &lt;= d &lt;= latest         \n elif earliest:                                \n             matches = earliest &lt;= d                   \n else:                                         \n             matches = d &lt;= latest  # type: ignore     \n         outputs.set_value(\"within_range\", matches)    \n   \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \n                                                                                \n</pre>"},{"location":"info/module_types/#kiara_info.module_types.list.contains","title":"<code>list.contains</code>","text":"<pre>                                                                                \n Documentation                                                                  \n    Check whether an element is in a list.                \n                       Author(s)                                                                      \n    Markus Binsteiner   markus@frkl.io                    \n Context                                                                        \n  Tags         core_types                               \n                        Labels       package: kiara_plugin.core_types         \n                        References   source_repo:                             \n                       https://github.com/DHARPA-Project/kia\u2026   \n documentation:                           \n                       https://DHARPA-Project.github.io/kiar\u2026   \n Module config schema                                                           \n  Field       Type     Descript\u2026   Required   Default   \n   \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \n                          constants   object   Value       no                   \n                                               constants                        \n                                               for this                         \n                                               module.                          \n                          defaults    object   Value       no                   \n                                               defaults                         \n                                               for this                         \n                                               module.                          \n                       Python class                                                                   \n  python_class_name    IncludedInListCheckModule        \n                        python_module_name   kiara_plugin.core_types.modul\u2026   \n                        full_name            kiara_plugin.core_types.modul\u2026   \n                       Processing source code  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \n                       class IncludedInListCheckModule(KiaraModule):         \n \"\"\"Check whether an element is in a list.\"\"\"      \n     _module_type_name = \"list.contains\"               \n def create_inputs_schema(                         \n         self,                                         \n     ) -&gt; ValueMapSchema:                              \n         inputs = {                                    \n \"list\": {\"type\": \"list\", \"doc\": \"The l\u2026   \n \"item\": {                                 \n \"type\": \"any\",                        \n \"doc\": \"The element to check for i\u2026   \n             },                                        \n         }                                             \n return inputs                                 \n def create_outputs_schema(                        \n         self,                                         \n     ) -&gt; ValueMapSchema:                              \n         outputs = {                                   \n \"is_included\": {                          \n \"type\": \"boolean\",                    \n \"doc\": \"Whether the element is in \u2026   \n             }                                         \n         }                                             \n return outputs                                \n def process(self, inputs: ValueMap, outputs: V\u2026   \n         item_list = inputs.get_value_data(\"list\")     \n         item = inputs.get_value_data(\"item\")          \n         outputs.set_value(\"is_included\", item in i\u2026   \n   \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \n                                                                                \n</pre>"},{"location":"info/module_types/#kiara_info.module_types.string.match_regex","title":"<code>string.match_regex</code>","text":"<pre>                                                                                \n Documentation                                                                  \n    Match a string using a regular expression.            \n                       Author(s)                                                                      \n    Markus Binsteiner   markus@frkl.io                    \n Context                                                                        \n  Tags         core_types                               \n                        Labels       package: kiara_plugin.core_types         \n                        References   source_repo:                             \n                       https://github.com/DHARPA-Project/kia\u2026   \n documentation:                           \n                       https://DHARPA-Project.github.io/kiar\u2026   \n Module config schema                                                           \n  Field      Type      Descript\u2026   Required   Default   \n   \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \n                          constan\u2026   object    Value       no                   \n                                               constants                        \n                                               for this                         \n                                               module.                          \n                          defaults   object    Value       no                   \n                                               defaults                         \n                                               for this                         \n                                               module.                          \n                          only_fi\u2026   boolean   Whether     no         false     \n                                               to only                          \n                                               return                           \n                                               the first                        \n                                               match, or                        \n                                               all                              \n                                               matches.                         \n                          regex      string    The regex   yes                  \n                                               to apply.                        \n                       Python class                                                                   \n  python_class_name    RegexModule                      \n                        python_module_name   kiara_plugin.core_types.modul\u2026   \n                        full_name            kiara_plugin.core_types.modul\u2026   \n                       Processing source code  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \n                       class RegexModule(KiaraModule):                       \n \"\"\"Match a string using a regular expression.\"\u2026   \n     _config_cls = RegexModuleConfig                   \n     _module_type_name = \"string.match_regex\"          \n def create_inputs_schema(                         \n         self,                                         \n     ) -&gt; ValueMapSchema:                              \n return {\"text\": {\"type\": \"string\", \"doc\": \u2026   \n def create_outputs_schema(                        \n         self,                                         \n     ) -&gt; ValueMapSchema:                              \n if self.get_config_value(\"only_first_match\u2026   \n             output_schema = {\"text\": {\"type\": \"str\u2026   \n else:                                         \n raise NotImplementedError()               \n return output_schema                          \n def process(self, inputs: ValueMap, outputs: V\u2026   \n         text = inputs.get_value_data(\"text\")          \n         regex = self.get_config_value(\"regex\")        \n         matches = re.findall(regex, text)             \n if not matches:                               \n raise KiaraProcessingException(f\"No ma\u2026   \n if self.get_config_value(\"only_first_match\u2026   \n             result = matches[0]                       \n else:                                         \n             result = matches                          \n         outputs.set_value(\"text\", result)             \n   \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \n                                                                                \n</pre>"},{"location":"info/module_types/#kiara_info.module_types.string.replace","title":"<code>string.replace</code>","text":"<pre>                                                                                \n Documentation                                                                  \n    Replace a string if it matches a key in a mapping     \n                          dictionary.                                           \n                       Author(s)                                                                      \n    Markus Binsteiner   markus@frkl.io                    \n Context                                                                        \n  Tags         core_types                               \n                        Labels       package: kiara_plugin.core_types         \n                        References   source_repo:                             \n                       https://github.com/DHARPA-Project/kia\u2026   \n documentation:                           \n                       https://DHARPA-Project.github.io/kiar\u2026   \n Module config schema                                                           \n  Field       Type     Descript\u2026   Required   Default   \n   \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \n                          constants   object   Value       no                   \n                                               constants                        \n                                               for this                         \n                                               module.                          \n                          default_\u2026   string   The         no                   \n                                               default                          \n                                               value to                         \n                                               use if                           \n                                               the                              \n                                               string to                        \n                                               be                               \n                                               replaced                         \n                                               is not in                        \n                                               the                              \n                                               replacem\u2026                        \n                                               map. By                          \n                                               default,                         \n                                               this just                        \n                                               returns                          \n                                               the                              \n                                               string                           \n                                               itself.                          \n                          defaults    object   Value       no                   \n                                               defaults                         \n                                               for this                         \n                                               module.                          \n                          replacem\u2026   object   A map,      yes                  \n                                               containi\u2026                        \n                                               the                              \n                                               strings                          \n                                               to be                            \n                                               replaced                         \n                                               as keys,                         \n                                               and the                          \n                                               replacem\u2026                        \n                                               as                               \n                                               values.                          \n                       Python class                                                                   \n  python_class_name    ReplaceStringModule              \n                        python_module_name   kiara_plugin.core_types.modul\u2026   \n                        full_name            kiara_plugin.core_types.modul\u2026   \n                       Processing source code  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \n                       class ReplaceStringModule(KiaraModule):               \n \"\"\"Replace a string if it matches a key in a m\u2026   \n     _config_cls = ReplaceModuleConfig                 \n     _module_type_name = \"string.replace\"              \n def create_inputs_schema(                         \n         self,                                         \n     ) -&gt; ValueMapSchema:                              \n return {\"text\": {\"type\": \"string\", \"doc\": \u2026   \n def create_outputs_schema(                        \n         self,                                         \n     ) -&gt; ValueMapSchema:                              \n return {\"text\": {\"type\": \"string\", \"doc\": \u2026   \n def process(self, inputs: ValueMap, outputs: V\u2026   \n         text = inputs.get_value_data(\"text\")          \n         repl_map = self.get_config_value(\"replacem\u2026   \n         default = self.get_config_value(\"default_v\u2026   \n if text not in repl_map.keys():               \n if default is None:                       \n                 result = text                         \n else:                                     \n                 result = default                      \n else:                                         \n             result = repl_map[text]                   \n         outputs.set_value(\"text\", result)             \n   \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \n                                                                                \n</pre>"},{"location":"info/operations/","title":"operations","text":""},{"location":"info/operations/#kiara_info.operations.date.check_range","title":"<code>date.check_range</code>","text":"Documentation <p>Check whether a date falls within a specified date range.</p> <p>If none one of the inputs 'earliest' or 'latest' is set, this module will always return 'True'.</p> <p>Return <code>True</code> if that's the case, otherwise <code>False</code>.</p> Inputs field name type description required default date date The date to check. yes earliest date The earliest date that is allowed. no latest date The latest date that is allowed. no Outputs field name type description required default within_range boolean A boolean indicating whether the provided date was within the allowed range ('true'), or not ('false') yes"},{"location":"info/operations/#kiara_info.operations.date.extract_from_string","title":"<code>date.extract_from_string</code>","text":"Documentation <p>Extract a date object from a string.</p> <p>This module is very bare bones so far, only using the standard parser from the dateutil package to parse strings into dates.</p> Inputs field name type description required default text string The input string. yes Outputs field name type description required default date date The date extracted from the input string. yes"},{"location":"info/operations/#kiara_info.operations.deserialize.kiara_model.as.python_object","title":"<code>deserialize.kiara_model.as.python_object</code>","text":"Documentation <p>-- n/a --</p> Inputs field name type description required default kiara_model kiara_model The value object. yes deserialization_config any Serialization-format specific configuration. no Outputs field name type description required default python_object python_object The deserialized python object instance. yes"},{"location":"info/operations/#kiara_info.operations.deserialize.kiara_model_list.as.python_object","title":"<code>deserialize.kiara_model_list.as.python_object</code>","text":"Documentation <p>-- n/a --</p> Inputs field name type description required default kiara_model_list kiara_model_list The value object. yes deserialization_config any Serialization-format specific configuration. no Outputs field name type description required default python_object python_object The deserialized python object instance. yes"},{"location":"info/operations/#kiara_info.operations.list.contains","title":"<code>list.contains</code>","text":"Documentation <p>Check whether an element is in a list.</p> Inputs field name type description required default list list The list. yes item any The element to check for inclusion in the list. yes Outputs field name type description required default is_included boolean Whether the element is in the list, or not. yes"},{"location":"info/operations/#kiara_info.operations.logic.and","title":"<code>logic.and</code>","text":"Documentation <p>Returns 'True' if both inputs are 'True'.</p> Inputs field name type description required default a boolean A boolean describing this input state. yes b boolean A boolean describing this input state. yes Outputs field name type description required default y boolean A boolean describing the module output state. yes"},{"location":"info/operations/#kiara_info.operations.logic.nand","title":"<code>logic.nand</code>","text":"Documentation <p>Returns 'False' if both inputs are 'True'.</p> Inputs field name type description required default a boolean A boolean describing this input state. yes b boolean A boolean describing this input state. yes Outputs field name type description required default y boolean A boolean describing the module output state. yes"},{"location":"info/operations/#kiara_info.operations.logic.nor","title":"<code>logic.nor</code>","text":"Documentation <p>Returns 'True' if both inputs are 'False'.</p> Inputs field name type description required default a boolean A boolean describing this input state. yes b boolean A boolean describing this input state. yes Outputs field name type description required default y boolean A boolean describing the module output state. yes"},{"location":"info/operations/#kiara_info.operations.logic.not","title":"<code>logic.not</code>","text":"Documentation <p>Negates the input.</p> Inputs field name type description required default a boolean A boolean describing this input state. yes Outputs field name type description required default y boolean A boolean describing the module output state. yes"},{"location":"info/operations/#kiara_info.operations.logic.or","title":"<code>logic.or</code>","text":"Documentation <p>Returns 'True' if one of the inputs is 'True'.</p> Inputs field name type description required default a boolean A boolean describing this input state. yes b boolean A boolean describing this input state. yes Outputs field name type description required default y boolean A boolean describing the module output state. yes"},{"location":"info/operations/#kiara_info.operations.logic.xor","title":"<code>logic.xor</code>","text":"Documentation <p>Returns 'True' if exactly one of it's two inputs is 'True'.</p> Inputs field name type description required default a boolean A boolean describing this input state. yes b boolean A boolean describing this input state. yes Outputs field name type description required default y boolean A boolean describing the module output state. yes"},{"location":"info/operations/#kiara_info.operations.string_filter.tokens","title":"<code>string_filter.tokens</code>","text":"Documentation <p>-- n/a --</p> Inputs field name type description required default value string A value of type 'string'. yes filter_tokens list A list of tokens to filter out. no replacement string The string to replace the tokens with. no Outputs field name type description required default value string The filtered value. yes"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li>kiara_plugin<ul> <li>core_types<ul> <li>data_types<ul> <li>models</li> </ul> </li> <li>defaults</li> <li>models</li> <li>modules<ul> <li>boolean</li> <li>date</li> <li>list</li> <li>models</li> <li>string</li> </ul> </li> <li>pipelines</li> <li>renderers<ul> <li>lineage</li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/kiara_plugin/core_types/__init__/","title":"core_types","text":"<p>Top-level package for kiara_plugin.core_types.</p>"},{"location":"reference/kiara_plugin/core_types/__init__/#kiara_plugin.core_types-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/core_types/__init__/#kiara_plugin.core_types.KIARA_METADATA","title":"<code>KIARA_METADATA = {'authors': [{'name': __author__, 'email': __email__}], 'description': 'Kiara modules for: core-types', 'references': {'source_repo': {'desc': 'The module package git repository.', 'url': 'https://github.com/DHARPA-Project/kiara_plugin.core_types'}, 'documentation': {'desc': 'The url for the module package documentation.', 'url': 'https://DHARPA-Project.github.io/kiara_plugin.core_types/'}}, 'tags': ['core_types'], 'labels': {'package': 'kiara_plugin.core_types'}}</code>  <code>module-attribute</code>","text":""},{"location":"reference/kiara_plugin/core_types/__init__/#kiara_plugin.core_types.find_modules","title":"<code>find_modules: KiaraEntryPointItem = (find_kiara_modules_under, 'kiara_plugin.core_types.modules')</code>  <code>module-attribute</code>","text":""},{"location":"reference/kiara_plugin/core_types/__init__/#kiara_plugin.core_types.find_model_classes","title":"<code>find_model_classes: KiaraEntryPointItem = (find_kiara_model_classes_under, 'kiara_plugin.core_types.models')</code>  <code>module-attribute</code>","text":""},{"location":"reference/kiara_plugin/core_types/__init__/#kiara_plugin.core_types.find_data_types","title":"<code>find_data_types: KiaraEntryPointItem = (find_data_types_under, 'kiara_plugin.core_types.data_types')</code>  <code>module-attribute</code>","text":""},{"location":"reference/kiara_plugin/core_types/__init__/#kiara_plugin.core_types.find_pipelines","title":"<code>find_pipelines: KiaraEntryPointItem = (find_pipeline_base_path_for_module, 'kiara_plugin.core_types.pipelines', KIARA_METADATA)</code>  <code>module-attribute</code>","text":""},{"location":"reference/kiara_plugin/core_types/__init__/#kiara_plugin.core_types.find_renderer_classes","title":"<code>find_renderer_classes: KiaraEntryPointItem = (find_kiara_renderers_under, 'kiara_plugin.core_types.renderers')</code>  <code>module-attribute</code>","text":""},{"location":"reference/kiara_plugin/core_types/__init__/#kiara_plugin.core_types-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/core_types/__init__/#kiara_plugin.core_types.get_version","title":"<code>get_version()</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/core_types/__init__.py</code> <pre><code>def get_version():\n    from pkg_resources import DistributionNotFound, get_distribution\n\n    try:\n        # Change here if project is renamed and does not equal the package name\n        dist_name = __name__\n        __version__ = get_distribution(dist_name).version\n    except DistributionNotFound:\n\n        try:\n            version_file = os.path.join(os.path.dirname(__file__), \"version.txt\")\n\n            if os.path.exists(version_file):\n                with open(version_file, encoding=\"utf-8\") as vf:\n                    __version__ = vf.read()\n            else:\n                __version__ = \"unknown\"\n\n        except (Exception):\n            pass\n\n        if __version__ is None:\n            __version__ = \"unknown\"\n\n    return __version__\n</code></pre>"},{"location":"reference/kiara_plugin/core_types/defaults/","title":"defaults","text":""},{"location":"reference/kiara_plugin/core_types/defaults/#kiara_plugin.core_types.defaults-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/core_types/defaults/#kiara_plugin.core_types.defaults.DEFAULT_MODEL_KEY","title":"<code>DEFAULT_MODEL_KEY = 'data'</code>  <code>module-attribute</code>","text":""},{"location":"reference/kiara_plugin/core_types/models/","title":"models","text":"<p>This module contains the metadata (and other) models that are used in the <code>kiara_plugin.core_types</code> package.</p> <p>Those models are convenience wrappers that make it easier for kiara to find, create, manage and version metadata -- but also other type of models -- that is attached to data, as well as kiara modules.</p> <p>Metadata models must be a sub-class of kiara.metadata.MetadataModel. Other models usually sub-class a pydantic BaseModel or implement custom base classes.</p>"},{"location":"reference/kiara_plugin/core_types/models/#kiara_plugin.core_types.models-classes","title":"Classes","text":""},{"location":"reference/kiara_plugin/core_types/models/#kiara_plugin.core_types.models.KiaraList","title":"<code>KiaraList</code>","text":"<p>         Bases: <code>BaseModel</code>, <code>Sequence</code></p> <p>A list implentation that contains (optional) schema information of the lists items.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/core_types/models.py</code> <pre><code>class KiaraList(BaseModel, Sequence):\n\"\"\"A list implentation that contains (optional) schema information of the lists items.\"\"\"\n\n    class Config:\n        json_loads = orjson.loads\n        json_dumps = orjson_dumps\n\n    list_data: List[Any] = Field(description=\"The data.\")\n    item_schema: Dict[str, Any] = Field(description=\"The schema.\")\n    python_class: PythonClass = Field(\n        description=\"The python class of which model instances are created. This is mostly meant as a hint for client applications.\"\n    )\n\n    _size_cache: int = PrivateAttr(default=None)\n    _hash_cache: int = PrivateAttr(default=None)\n    _data_hash: int = PrivateAttr(default=None)\n    _schema_hash: int = PrivateAttr(default=None)\n    _value_hash: int = PrivateAttr(default=None)\n\n    @property\n    def size(self):\n        if self._size_cache is not None:\n            return self._size_cache\n\n        self._size_cache = len(self.list_data) + len(self.item_schema)\n        return self._size_cache\n\n    @property\n    def data_hash(self) -&gt; int:\n        if self._data_hash is not None:\n            return self._data_hash\n\n        self._data_hash = compute_cid(self.list_data)\n        return self._data_hash\n\n    @property\n    def schema_hash(self) -&gt; int:\n        if self._schema_hash is not None:\n            return self._schema_hash\n\n        self._schema_hash = compute_cid(self.item_schema)\n        return self._schema_hash\n\n    @property\n    def value_hash(self) -&gt; int:\n        if self._value_hash is not None:\n            return self._value_hash\n\n        obj = {\"data\": self.data_hash, \"item_schema\": self.schema_hash}\n        self._value_hash = compute_cid(obj)\n        return self._value_hash\n\n    def __getitem__(self, item):\n\n        return self.list_data.__getitem__(item)\n\n    def __iter__(self):\n        return self.list_data.__iter__()\n\n    def __len__(self):\n        return self.list_data.__len__()\n</code></pre>"},{"location":"reference/kiara_plugin/core_types/models/#kiara_plugin.core_types.models.KiaraList-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/core_types/models/#kiara_plugin.core_types.models.KiaraList.list_data","title":"<code>list_data: List[Any] = Field(description='The data.')</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/core_types/models/#kiara_plugin.core_types.models.KiaraList.item_schema","title":"<code>item_schema: Dict[str, Any] = Field(description='The schema.')</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/core_types/models/#kiara_plugin.core_types.models.KiaraList.python_class","title":"<code>python_class: PythonClass = Field(description='The python class of which model instances are created. This is mostly meant as a hint for client applications.')</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/core_types/models/#kiara_plugin.core_types.models.KiaraList.size","title":"<code>size</code>  <code>property</code>","text":""},{"location":"reference/kiara_plugin/core_types/models/#kiara_plugin.core_types.models.KiaraList.data_hash","title":"<code>data_hash: int</code>  <code>property</code>","text":""},{"location":"reference/kiara_plugin/core_types/models/#kiara_plugin.core_types.models.KiaraList.schema_hash","title":"<code>schema_hash: int</code>  <code>property</code>","text":""},{"location":"reference/kiara_plugin/core_types/models/#kiara_plugin.core_types.models.KiaraList.value_hash","title":"<code>value_hash: int</code>  <code>property</code>","text":""},{"location":"reference/kiara_plugin/core_types/models/#kiara_plugin.core_types.models.KiaraList-classes","title":"Classes","text":""},{"location":"reference/kiara_plugin/core_types/models/#kiara_plugin.core_types.models.KiaraList.Config","title":"<code>Config</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/core_types/models.py</code> <pre><code>class Config:\n    json_loads = orjson.loads\n    json_dumps = orjson_dumps\n</code></pre>"},{"location":"reference/kiara_plugin/core_types/models/#kiara_plugin.core_types.models.KiaraList.Config-attributes","title":"Attributes","text":"<code>json_loads = orjson.loads</code> <code>instance-attribute</code> <code>class-attribute</code> \u00b6 <code>json_dumps = orjson_dumps</code> <code>instance-attribute</code> <code>class-attribute</code> \u00b6"},{"location":"reference/kiara_plugin/core_types/models/#kiara_plugin.core_types.models.KiaraModelSchemaMetadata","title":"<code>KiaraModelSchemaMetadata</code>","text":"<p>         Bases: <code>ValueMetadata</code></p> <p>File stats.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/core_types/models.py</code> <pre><code>class KiaraModelSchemaMetadata(ValueMetadata):\n\"\"\"File stats.\"\"\"\n\n    _metadata_key = \"kiara_model_schema\"\n\n    @classmethod\n    def retrieve_supported_data_types(cls) -&gt; Iterable[str]:\n        return [\"kiara_model\", \"kiara_model_list\"]\n\n    @classmethod\n    def create_value_metadata(cls, value: \"Value\") -&gt; \"KiaraModelSchemaMetadata\":\n\n        kiara_model_id = value.data_type_config.get(\"kiara_model_id\", None)\n        if not kiara_model_id:\n            raise KiaraException(\n                \"No kiara model id found in data type config. This is a bug.\"\n            )\n\n        model_cls = ModelRegistry.instance().get_model_cls(kiara_model_id)\n\n        md = KiaraModelSchemaMetadata(\n            kiara_model_id=kiara_model_id, model_schema=model_cls.schema_json()\n        )\n        return md\n\n    kiara_model_id: str = Field(\n        description=\"The id of the kiara model that is contained in this list.\"\n    )\n    model_schema: str = Field(description=\"The (JSON) schema of the model.\")\n</code></pre>"},{"location":"reference/kiara_plugin/core_types/models/#kiara_plugin.core_types.models.KiaraModelSchemaMetadata-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/core_types/models/#kiara_plugin.core_types.models.KiaraModelSchemaMetadata.kiara_model_id","title":"<code>kiara_model_id: str = Field(description='The id of the kiara model that is contained in this list.')</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/core_types/models/#kiara_plugin.core_types.models.KiaraModelSchemaMetadata.model_schema","title":"<code>model_schema: str = Field(description='The (JSON) schema of the model.')</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/core_types/models/#kiara_plugin.core_types.models.KiaraModelSchemaMetadata-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/core_types/models/#kiara_plugin.core_types.models.KiaraModelSchemaMetadata.retrieve_supported_data_types","title":"<code>retrieve_supported_data_types() -&gt; Iterable[str]</code>  <code>classmethod</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/core_types/models.py</code> <pre><code>@classmethod\ndef retrieve_supported_data_types(cls) -&gt; Iterable[str]:\n    return [\"kiara_model\", \"kiara_model_list\"]\n</code></pre>"},{"location":"reference/kiara_plugin/core_types/models/#kiara_plugin.core_types.models.KiaraModelSchemaMetadata.create_value_metadata","title":"<code>create_value_metadata(value: Value) -&gt; KiaraModelSchemaMetadata</code>  <code>classmethod</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/core_types/models.py</code> <pre><code>@classmethod\ndef create_value_metadata(cls, value: \"Value\") -&gt; \"KiaraModelSchemaMetadata\":\n\n    kiara_model_id = value.data_type_config.get(\"kiara_model_id\", None)\n    if not kiara_model_id:\n        raise KiaraException(\n            \"No kiara model id found in data type config. This is a bug.\"\n        )\n\n    model_cls = ModelRegistry.instance().get_model_cls(kiara_model_id)\n\n    md = KiaraModelSchemaMetadata(\n        kiara_model_id=kiara_model_id, model_schema=model_cls.schema_json()\n    )\n    return md\n</code></pre>"},{"location":"reference/kiara_plugin/core_types/models/#kiara_plugin.core_types.models.KiaraModelListMetadata","title":"<code>KiaraModelListMetadata</code>","text":"<p>         Bases: <code>ValueMetadata</code></p> <p>File stats.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/core_types/models.py</code> <pre><code>class KiaraModelListMetadata(ValueMetadata):\n\"\"\"File stats.\"\"\"\n\n    _metadata_key = \"kiara_model_list\"\n\n    @classmethod\n    def retrieve_supported_data_types(cls) -&gt; Iterable[str]:\n        return [\"kiara_model_list\"]\n\n    @classmethod\n    def create_value_metadata(cls, value: \"Value\") -&gt; \"KiaraModelListMetadata\":\n\n        model_list: \"KiaraModelList\" = value.data\n        length = len(model_list.list_items)\n\n        md = KiaraModelListMetadata(length=length)\n        return md\n\n    length: int = Field(\n        description=\"The number of model instances that are contained in this list.\"\n    )\n</code></pre>"},{"location":"reference/kiara_plugin/core_types/models/#kiara_plugin.core_types.models.KiaraModelListMetadata-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/core_types/models/#kiara_plugin.core_types.models.KiaraModelListMetadata.length","title":"<code>length: int = Field(description='The number of model instances that are contained in this list.')</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/core_types/models/#kiara_plugin.core_types.models.KiaraModelListMetadata-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/core_types/models/#kiara_plugin.core_types.models.KiaraModelListMetadata.retrieve_supported_data_types","title":"<code>retrieve_supported_data_types() -&gt; Iterable[str]</code>  <code>classmethod</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/core_types/models.py</code> <pre><code>@classmethod\ndef retrieve_supported_data_types(cls) -&gt; Iterable[str]:\n    return [\"kiara_model_list\"]\n</code></pre>"},{"location":"reference/kiara_plugin/core_types/models/#kiara_plugin.core_types.models.KiaraModelListMetadata.create_value_metadata","title":"<code>create_value_metadata(value: Value) -&gt; KiaraModelListMetadata</code>  <code>classmethod</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/core_types/models.py</code> <pre><code>@classmethod\ndef create_value_metadata(cls, value: \"Value\") -&gt; \"KiaraModelListMetadata\":\n\n    model_list: \"KiaraModelList\" = value.data\n    length = len(model_list.list_items)\n\n    md = KiaraModelListMetadata(length=length)\n    return md\n</code></pre>"},{"location":"reference/kiara_plugin/core_types/data_types/__init__/","title":"data_types","text":"<p>This module contains the value type classes that are used in the <code>kiara_plugin.core_types</code> package.</p>"},{"location":"reference/kiara_plugin/core_types/data_types/__init__/#kiara_plugin.core_types.data_types-classes","title":"Classes","text":""},{"location":"reference/kiara_plugin/core_types/data_types/__init__/#kiara_plugin.core_types.data_types.IntegerType","title":"<code>IntegerType</code>","text":"<p>         Bases: <code>AnyType[int, DataTypeConfig]</code></p> <p>An integer.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/core_types/data_types/__init__.py</code> <pre><code>class IntegerType(AnyType[int, DataTypeConfig]):\n\"\"\"An integer.\"\"\"\n\n    _data_type_name = \"integer\"\n\n    @classmethod\n    def python_class(cls) -&gt; Type:\n        return int\n\n    def serialize(self, data: int) -&gt; Union[None, str, \"SerializedData\"]:\n        result = self.serialize_as_json(data)\n        return result\n\n    def _retrieve_characteristics(self) -&gt; DataTypeCharacteristics:\n        return SCALAR_CHARACTERISTICS\n\n    def parse_python_obj(self, data: Any) -&gt; int:\n        return int(data)\n</code></pre>"},{"location":"reference/kiara_plugin/core_types/data_types/__init__/#kiara_plugin.core_types.data_types.IntegerType-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/core_types/data_types/__init__/#kiara_plugin.core_types.data_types.IntegerType.python_class","title":"<code>python_class() -&gt; Type</code>  <code>classmethod</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/core_types/data_types/__init__.py</code> <pre><code>@classmethod\ndef python_class(cls) -&gt; Type:\n    return int\n</code></pre>"},{"location":"reference/kiara_plugin/core_types/data_types/__init__/#kiara_plugin.core_types.data_types.IntegerType.serialize","title":"<code>serialize(data: int) -&gt; Union[None, str, SerializedData]</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/core_types/data_types/__init__.py</code> <pre><code>def serialize(self, data: int) -&gt; Union[None, str, \"SerializedData\"]:\n    result = self.serialize_as_json(data)\n    return result\n</code></pre>"},{"location":"reference/kiara_plugin/core_types/data_types/__init__/#kiara_plugin.core_types.data_types.IntegerType.parse_python_obj","title":"<code>parse_python_obj(data: Any) -&gt; int</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/core_types/data_types/__init__.py</code> <pre><code>def parse_python_obj(self, data: Any) -&gt; int:\n    return int(data)\n</code></pre>"},{"location":"reference/kiara_plugin/core_types/data_types/__init__/#kiara_plugin.core_types.data_types.FloatType","title":"<code>FloatType</code>","text":"<p>         Bases: <code>AnyType[float, DataTypeConfig]</code></p> <p>A float.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/core_types/data_types/__init__.py</code> <pre><code>class FloatType(AnyType[float, DataTypeConfig]):\n    \"A float.\"\n\n    _data_type_name = \"float\"\n\n    @classmethod\n    def python_class(cls) -&gt; Type:\n        return float\n\n    def serialize(self, data: float) -&gt; Union[None, str, \"SerializedData\"]:\n        result = self.serialize_as_json(data)\n        return result\n\n    def _retrieve_characteristics(self) -&gt; DataTypeCharacteristics:\n        return SCALAR_CHARACTERISTICS\n\n    def _validate(cls, value: Any) -&gt; Any:\n\n        if not isinstance(value, float):\n            raise ValueError(f\"Invalid type '{type(value)}' for float: {value}\")\n</code></pre>"},{"location":"reference/kiara_plugin/core_types/data_types/__init__/#kiara_plugin.core_types.data_types.FloatType-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/core_types/data_types/__init__/#kiara_plugin.core_types.data_types.FloatType.python_class","title":"<code>python_class() -&gt; Type</code>  <code>classmethod</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/core_types/data_types/__init__.py</code> <pre><code>@classmethod\ndef python_class(cls) -&gt; Type:\n    return float\n</code></pre>"},{"location":"reference/kiara_plugin/core_types/data_types/__init__/#kiara_plugin.core_types.data_types.FloatType.serialize","title":"<code>serialize(data: float) -&gt; Union[None, str, SerializedData]</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/core_types/data_types/__init__.py</code> <pre><code>def serialize(self, data: float) -&gt; Union[None, str, \"SerializedData\"]:\n    result = self.serialize_as_json(data)\n    return result\n</code></pre>"},{"location":"reference/kiara_plugin/core_types/data_types/__init__/#kiara_plugin.core_types.data_types.DateType","title":"<code>DateType</code>","text":"<p>         Bases: <code>AnyType[datetime.datetime, DataTypeConfig]</code></p> <p>A date.</p> <p>Internally, this will always be represented as a Python <code>datetime</code> object. Iff provided as input, it can also be as string, in which case the <code>dateutils.parser.parse</code> method will be used to parse the string into a datetime object.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/core_types/data_types/__init__.py</code> <pre><code>class DateType(AnyType[datetime.datetime, DataTypeConfig]):\n\"\"\"A date.\n\n    Internally, this will always be represented as a Python ``datetime`` object. Iff provided as input, it can also\n    be as string, in which case the [``dateutils.parser.parse``](https://dateutil.readthedocs.io/en/stable/parser.html#dateutil.parser.parse) method will be used to parse the string into a datetime object.\n    \"\"\"\n\n    _data_type_name = \"date\"\n\n    @classmethod\n    def python_class(cls) -&gt; Type:\n        return datetime.datetime\n\n    def serialize(self, data: datetime.datetime) -&gt; SerializedData:\n        result = self.serialize_as_json(data)\n        return result\n\n    def _retrieve_characteristics(self) -&gt; DataTypeCharacteristics:\n        return SCALAR_CHARACTERISTICS\n\n    def parse_python_obj(self, data: Any) -&gt; datetime.datetime:\n\n        from dateutil import parser\n\n        if isinstance(data, str):\n            d = parser.parse(data)\n            return d\n        elif isinstance(data, datetime.date):\n            _d = datetime.datetime(year=data.year, month=data.month, day=data.day)\n            return _d\n\n        raise Exception(f\"Can't parse data into a 'datetime' object: {data}\")\n\n    def validate(cls, value: Any):\n        assert isinstance(value, datetime.datetime)\n</code></pre>"},{"location":"reference/kiara_plugin/core_types/data_types/__init__/#kiara_plugin.core_types.data_types.DateType-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/core_types/data_types/__init__/#kiara_plugin.core_types.data_types.DateType.python_class","title":"<code>python_class() -&gt; Type</code>  <code>classmethod</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/core_types/data_types/__init__.py</code> <pre><code>@classmethod\ndef python_class(cls) -&gt; Type:\n    return datetime.datetime\n</code></pre>"},{"location":"reference/kiara_plugin/core_types/data_types/__init__/#kiara_plugin.core_types.data_types.DateType.serialize","title":"<code>serialize(data: datetime.datetime) -&gt; SerializedData</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/core_types/data_types/__init__.py</code> <pre><code>def serialize(self, data: datetime.datetime) -&gt; SerializedData:\n    result = self.serialize_as_json(data)\n    return result\n</code></pre>"},{"location":"reference/kiara_plugin/core_types/data_types/__init__/#kiara_plugin.core_types.data_types.DateType.parse_python_obj","title":"<code>parse_python_obj(data: Any) -&gt; datetime.datetime</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/core_types/data_types/__init__.py</code> <pre><code>def parse_python_obj(self, data: Any) -&gt; datetime.datetime:\n\n    from dateutil import parser\n\n    if isinstance(data, str):\n        d = parser.parse(data)\n        return d\n    elif isinstance(data, datetime.date):\n        _d = datetime.datetime(year=data.year, month=data.month, day=data.day)\n        return _d\n\n    raise Exception(f\"Can't parse data into a 'datetime' object: {data}\")\n</code></pre>"},{"location":"reference/kiara_plugin/core_types/data_types/__init__/#kiara_plugin.core_types.data_types.DateType.validate","title":"<code>validate(value: Any)</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/core_types/data_types/__init__.py</code> <pre><code>def validate(cls, value: Any):\n    assert isinstance(value, datetime.datetime)\n</code></pre>"},{"location":"reference/kiara_plugin/core_types/data_types/__init__/#kiara_plugin.core_types.data_types.ListValueType","title":"<code>ListValueType</code>","text":"<p>         Bases: <code>AnyType[KiaraList, DataTypeConfig]</code></p> <p>A list.</p> <p>Backed by the [kiara_plugin.core_types.models.ListModel] class, this data type allows to (optionally) specify a schema for the items in the list.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/core_types/data_types/__init__.py</code> <pre><code>class ListValueType(AnyType[KiaraList, DataTypeConfig]):\n\"\"\"A list.\n\n    Backed by the [kiara_plugin.core_types.models.ListModel] class, this data type allows to (optionally) specify\n    a schema for the items in the list.\n    \"\"\"\n\n    _data_type_name = \"list\"\n\n    @classmethod\n    def python_class(cls) -&gt; Type:\n        return KiaraList\n\n    def _retrieve_characteristics(self) -&gt; DataTypeCharacteristics:\n        return DataTypeCharacteristics(is_scalar=False, is_json_serializable=True)\n\n    def parse_python_obj(self, data: Any) -&gt; KiaraList:\n\n        python_cls = data.__class__\n        _data = None\n        _schema = None\n\n        if isinstance(data, Mapping) and \"list_data\" in data.keys():\n            list_model = KiaraList(**data)\n            return list_model\n\n        if isinstance(data, Iterable):\n            _schema = {\"title\": \"list\", \"type\": \"object\"}\n            _data = data\n        elif isinstance(data, str):\n            try:\n                _data = orjson.loads(data)\n                if not isinstance(_data, str) and isinstance(list, Iterable):\n                    _schema = {\"title\": \"dict\", \"type\": \"object\"}\n            except Exception:\n                if isinstance(_data, str):\n                    raise Exception(\n                        \"Can't create list: can't parse string as json into list.\"\n                    )\n\n        if _data is None or _schema is None:\n            raise Exception(f\"Invalid data for value type 'list': {data}\")\n\n        result = {\n            \"list_data\": _data,\n            \"item_schema\": _schema,\n            \"python_class\": PythonClass.from_class(python_cls).dict(),\n        }\n\n        result_model = KiaraList(**result)\n        return result_model\n\n    def _validate(self, data: KiaraList) -&gt; None:\n\n        if not isinstance(data, KiaraList):\n            raise Exception(f\"Invalid type: {type(data)}.\")\n\n    # def render_as__string(self, value: Value, render_config: Mapping[str, Any]) -&gt; str:\n    #\n    #     data: ListModel = value.data\n    #     return orjson_dumps(data.list_data, option=orjson.OPT_INDENT_2)\n\n    def serialize(self, data: KiaraList) -&gt; SerializedData:\n\n        result = self.serialize_as_json(data.dict())\n        return result\n</code></pre>"},{"location":"reference/kiara_plugin/core_types/data_types/__init__/#kiara_plugin.core_types.data_types.ListValueType-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/core_types/data_types/__init__/#kiara_plugin.core_types.data_types.ListValueType.python_class","title":"<code>python_class() -&gt; Type</code>  <code>classmethod</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/core_types/data_types/__init__.py</code> <pre><code>@classmethod\ndef python_class(cls) -&gt; Type:\n    return KiaraList\n</code></pre>"},{"location":"reference/kiara_plugin/core_types/data_types/__init__/#kiara_plugin.core_types.data_types.ListValueType.parse_python_obj","title":"<code>parse_python_obj(data: Any) -&gt; KiaraList</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/core_types/data_types/__init__.py</code> <pre><code>def parse_python_obj(self, data: Any) -&gt; KiaraList:\n\n    python_cls = data.__class__\n    _data = None\n    _schema = None\n\n    if isinstance(data, Mapping) and \"list_data\" in data.keys():\n        list_model = KiaraList(**data)\n        return list_model\n\n    if isinstance(data, Iterable):\n        _schema = {\"title\": \"list\", \"type\": \"object\"}\n        _data = data\n    elif isinstance(data, str):\n        try:\n            _data = orjson.loads(data)\n            if not isinstance(_data, str) and isinstance(list, Iterable):\n                _schema = {\"title\": \"dict\", \"type\": \"object\"}\n        except Exception:\n            if isinstance(_data, str):\n                raise Exception(\n                    \"Can't create list: can't parse string as json into list.\"\n                )\n\n    if _data is None or _schema is None:\n        raise Exception(f\"Invalid data for value type 'list': {data}\")\n\n    result = {\n        \"list_data\": _data,\n        \"item_schema\": _schema,\n        \"python_class\": PythonClass.from_class(python_cls).dict(),\n    }\n\n    result_model = KiaraList(**result)\n    return result_model\n</code></pre>"},{"location":"reference/kiara_plugin/core_types/data_types/__init__/#kiara_plugin.core_types.data_types.ListValueType.serialize","title":"<code>serialize(data: KiaraList) -&gt; SerializedData</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/core_types/data_types/__init__.py</code> <pre><code>def serialize(self, data: KiaraList) -&gt; SerializedData:\n\n    result = self.serialize_as_json(data.dict())\n    return result\n</code></pre>"},{"location":"reference/kiara_plugin/core_types/data_types/models/","title":"models","text":"<p>This module contains the value type classes that are used in the <code>kiara_plugin.core_types</code> package.</p>"},{"location":"reference/kiara_plugin/core_types/data_types/models/#kiara_plugin.core_types.data_types.models-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/core_types/data_types/models/#kiara_plugin.core_types.data_types.models.logger","title":"<code>logger = structlog.getLogger()</code>  <code>module-attribute</code>","text":""},{"location":"reference/kiara_plugin/core_types/data_types/models/#kiara_plugin.core_types.data_types.models.KIARA_MODEL","title":"<code>KIARA_MODEL = TypeVar('KIARA_MODEL')</code>  <code>module-attribute</code>","text":""},{"location":"reference/kiara_plugin/core_types/data_types/models/#kiara_plugin.core_types.data_types.models-classes","title":"Classes","text":""},{"location":"reference/kiara_plugin/core_types/data_types/models/#kiara_plugin.core_types.data_types.models.KiaraModelTypeConfig","title":"<code>KiaraModelTypeConfig</code>","text":"<p>         Bases: <code>DataTypeConfig</code></p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/core_types/data_types/models.py</code> <pre><code>class KiaraModelTypeConfig(DataTypeConfig):\n\n    kiara_model_id: str = Field(\n        description=\"The ID of a registered kiara model.\", default=\"instance.dummy\"\n    )\n</code></pre>"},{"location":"reference/kiara_plugin/core_types/data_types/models/#kiara_plugin.core_types.data_types.models.KiaraModelTypeConfig-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/core_types/data_types/models/#kiara_plugin.core_types.data_types.models.KiaraModelTypeConfig.kiara_model_id","title":"<code>kiara_model_id: str = Field(description='The ID of a registered kiara model.', default='instance.dummy')</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/core_types/data_types/models/#kiara_plugin.core_types.data_types.models.KiaraModelType","title":"<code>KiaraModelType</code>","text":"<p>         Bases: <code>AnyType[KiaraModel, KiaraModelTypeConfig]</code></p> <p>A model.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/core_types/data_types/models.py</code> <pre><code>class KiaraModelType(AnyType[KiaraModel, KiaraModelTypeConfig]):\n\"\"\"A model.\"\"\"\n\n    _data_type_name = \"kiara_model\"\n    # _cls_cache: Union[Type[KiaraModel], None] = PrivateAttr(default=None)\n\n    @classmethod\n    def data_type_config_class(cls) -&gt; Type[KiaraModelTypeConfig]:\n\"\"\"The Python class that holds the (optional) configuration for a data type instance.\"\"\"\n        return KiaraModelTypeConfig  # type: ignore\n\n    def serialize(self, data: KiaraModel) -&gt; Union[str, SerializedData]:\n\n        if self.type_config.kiara_model_id is None:\n            logger.debug(\n                \"ignore.serialize_request\",\n                data_type=\"kiara_model\",\n                cls=data.__class__.__name__,\n                reason=\"no model id in type config\",\n            )\n            return NO_SERIALIZATION_MARKER\n\n        _data = {\n            \"data\": {\n                \"type\": \"inline-json\",\n                \"inline_data\": data.dict(),\n                \"codec\": \"json\",\n            },\n        }\n\n        serialized_data = {\n            \"data_type\": self.data_type_name,\n            \"data_type_config\": self.type_config.dict(),\n            \"data\": _data,\n            \"serialization_profile\": \"json\",\n            \"metadata\": {\n                \"environment\": {},\n                \"deserialize\": {\n                    \"python_object\": {\n                        \"module_type\": \"load.kiara_model\",\n                        \"module_config\": {\n                            \"value_type\": \"kiara_model\",\n                            \"target_profile\": \"python_object\",\n                            \"serialization_profile\": \"json\",\n                        },\n                    }\n                },\n            },\n        }\n        from kiara.models.values.value import SerializationResult\n\n        serialized = SerializationResult(**serialized_data)\n        return serialized\n\n    @classmethod\n    def python_class(cls) -&gt; Type[KiaraModel]:\n        return KiaraModel\n\n    @lru_cache(maxsize=1)\n    def get_model_cls(self) -&gt; Type[KiaraModel]:\n\n        model_type_id = self.type_config.kiara_model_id\n        assert model_type_id is not None\n\n        model_registry = ModelRegistry.instance()\n\n        model_cls = model_registry.get_model_cls(\n            model_type_id, required_subclass=KiaraModel\n        )\n\n        return model_cls\n\n    def parse_python_obj(self, data: Any) -&gt; KiaraModel:\n\n        if isinstance(data, KiaraModel):\n            return data\n        elif isinstance(data, Mapping):\n            return self.get_model_cls()(**data)\n        else:\n            _data = {DEFAULT_MODEL_KEY: data}\n            try:\n                result = self.get_model_cls()(**_data)\n                return result\n            except Exception as e:\n                raise KiaraException(\n                    msg=f\"Can't instantiate model of type '{self.type_config.kiara_model_id}' with data of type '{type(data)}': {e}\"\n                )\n\n    def _validate(self, value: KiaraModel) -&gt; None:\n\n        if not isinstance(value, KiaraModel):\n            raise Exception(f\"Invalid type: {type(value)}.\")\n\n        if value._kiara_model_id != self.type_config.kiara_model_id:  # type: ignore\n            raise Exception(\n                f\"Invalid model type '{value._kiara_model_id}': expected '{self.type_config.kiara_model_id}'.\"  # type: ignore\n            )\n\n    def _pretty_print_as__terminal_renderable(\n        self, value: \"Value\", render_config: Mapping[str, Any]\n    ):\n        json_str = value.data.json(option=orjson.OPT_INDENT_2)\n        return Syntax(json_str, \"json\", background_color=\"default\")\n</code></pre>"},{"location":"reference/kiara_plugin/core_types/data_types/models/#kiara_plugin.core_types.data_types.models.KiaraModelType-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/core_types/data_types/models/#kiara_plugin.core_types.data_types.models.KiaraModelType.data_type_config_class","title":"<code>data_type_config_class() -&gt; Type[KiaraModelTypeConfig]</code>  <code>classmethod</code>","text":"<p>The Python class that holds the (optional) configuration for a data type instance.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/core_types/data_types/models.py</code> <pre><code>@classmethod\ndef data_type_config_class(cls) -&gt; Type[KiaraModelTypeConfig]:\n\"\"\"The Python class that holds the (optional) configuration for a data type instance.\"\"\"\n    return KiaraModelTypeConfig  # type: ignore\n</code></pre>"},{"location":"reference/kiara_plugin/core_types/data_types/models/#kiara_plugin.core_types.data_types.models.KiaraModelType.serialize","title":"<code>serialize(data: KiaraModel) -&gt; Union[str, SerializedData]</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/core_types/data_types/models.py</code> <pre><code>def serialize(self, data: KiaraModel) -&gt; Union[str, SerializedData]:\n\n    if self.type_config.kiara_model_id is None:\n        logger.debug(\n            \"ignore.serialize_request\",\n            data_type=\"kiara_model\",\n            cls=data.__class__.__name__,\n            reason=\"no model id in type config\",\n        )\n        return NO_SERIALIZATION_MARKER\n\n    _data = {\n        \"data\": {\n            \"type\": \"inline-json\",\n            \"inline_data\": data.dict(),\n            \"codec\": \"json\",\n        },\n    }\n\n    serialized_data = {\n        \"data_type\": self.data_type_name,\n        \"data_type_config\": self.type_config.dict(),\n        \"data\": _data,\n        \"serialization_profile\": \"json\",\n        \"metadata\": {\n            \"environment\": {},\n            \"deserialize\": {\n                \"python_object\": {\n                    \"module_type\": \"load.kiara_model\",\n                    \"module_config\": {\n                        \"value_type\": \"kiara_model\",\n                        \"target_profile\": \"python_object\",\n                        \"serialization_profile\": \"json\",\n                    },\n                }\n            },\n        },\n    }\n    from kiara.models.values.value import SerializationResult\n\n    serialized = SerializationResult(**serialized_data)\n    return serialized\n</code></pre>"},{"location":"reference/kiara_plugin/core_types/data_types/models/#kiara_plugin.core_types.data_types.models.KiaraModelType.python_class","title":"<code>python_class() -&gt; Type[KiaraModel]</code>  <code>classmethod</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/core_types/data_types/models.py</code> <pre><code>@classmethod\ndef python_class(cls) -&gt; Type[KiaraModel]:\n    return KiaraModel\n</code></pre>"},{"location":"reference/kiara_plugin/core_types/data_types/models/#kiara_plugin.core_types.data_types.models.KiaraModelType.get_model_cls","title":"<code>get_model_cls() -&gt; Type[KiaraModel]</code>  <code>cached</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/core_types/data_types/models.py</code> <pre><code>@lru_cache(maxsize=1)\ndef get_model_cls(self) -&gt; Type[KiaraModel]:\n\n    model_type_id = self.type_config.kiara_model_id\n    assert model_type_id is not None\n\n    model_registry = ModelRegistry.instance()\n\n    model_cls = model_registry.get_model_cls(\n        model_type_id, required_subclass=KiaraModel\n    )\n\n    return model_cls\n</code></pre>"},{"location":"reference/kiara_plugin/core_types/data_types/models/#kiara_plugin.core_types.data_types.models.KiaraModelType.parse_python_obj","title":"<code>parse_python_obj(data: Any) -&gt; KiaraModel</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/core_types/data_types/models.py</code> <pre><code>def parse_python_obj(self, data: Any) -&gt; KiaraModel:\n\n    if isinstance(data, KiaraModel):\n        return data\n    elif isinstance(data, Mapping):\n        return self.get_model_cls()(**data)\n    else:\n        _data = {DEFAULT_MODEL_KEY: data}\n        try:\n            result = self.get_model_cls()(**_data)\n            return result\n        except Exception as e:\n            raise KiaraException(\n                msg=f\"Can't instantiate model of type '{self.type_config.kiara_model_id}' with data of type '{type(data)}': {e}\"\n            )\n</code></pre>"},{"location":"reference/kiara_plugin/core_types/data_types/models/#kiara_plugin.core_types.data_types.models.KiaraModelList","title":"<code>KiaraModelList</code>","text":"<p>         Bases: <code>GenericModel</code>, <code>Generic[KIARA_MODEL]</code></p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/core_types/data_types/models.py</code> <pre><code>class KiaraModelList(GenericModel, Generic[KIARA_MODEL]):\n    class Config(object):\n        json_loads = orjson.loads\n        json_dumps = orjson_dumps\n        extra = Extra.forbid\n\n    kiara_model_id: str = Field(description=\"The ID of a registered kiara model.\")\n    list_items: List[KIARA_MODEL] = Field(\n        description=\"The model instances in the list.\"\n    )\n</code></pre>"},{"location":"reference/kiara_plugin/core_types/data_types/models/#kiara_plugin.core_types.data_types.models.KiaraModelList-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/core_types/data_types/models/#kiara_plugin.core_types.data_types.models.KiaraModelList.kiara_model_id","title":"<code>kiara_model_id: str = Field(description='The ID of a registered kiara model.')</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/core_types/data_types/models/#kiara_plugin.core_types.data_types.models.KiaraModelList.list_items","title":"<code>list_items: List[KIARA_MODEL] = Field(description='The model instances in the list.')</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/core_types/data_types/models/#kiara_plugin.core_types.data_types.models.KiaraModelList-classes","title":"Classes","text":""},{"location":"reference/kiara_plugin/core_types/data_types/models/#kiara_plugin.core_types.data_types.models.KiaraModelList.Config","title":"<code>Config</code>","text":"<p>         Bases: <code>object</code></p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/core_types/data_types/models.py</code> <pre><code>class Config(object):\n    json_loads = orjson.loads\n    json_dumps = orjson_dumps\n    extra = Extra.forbid\n</code></pre>"},{"location":"reference/kiara_plugin/core_types/data_types/models/#kiara_plugin.core_types.data_types.models.KiaraModelList.Config-attributes","title":"Attributes","text":"<code>json_loads = orjson.loads</code> <code>instance-attribute</code> <code>class-attribute</code> \u00b6 <code>json_dumps = orjson_dumps</code> <code>instance-attribute</code> <code>class-attribute</code> \u00b6 <code>extra = Extra.forbid</code> <code>instance-attribute</code> <code>class-attribute</code> \u00b6"},{"location":"reference/kiara_plugin/core_types/data_types/models/#kiara_plugin.core_types.data_types.models.KiaraModelListType","title":"<code>KiaraModelListType</code>","text":"<p>         Bases: <code>AnyType[KiaraModelList, KiaraModelTypeConfig]</code></p> <p>A model.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/core_types/data_types/models.py</code> <pre><code>class KiaraModelListType(AnyType[KiaraModelList, KiaraModelTypeConfig]):\n\"\"\"A model.\"\"\"\n\n    _data_type_name = \"kiara_model_list\"\n\n    @classmethod\n    def data_type_config_class(cls) -&gt; Type[KiaraModelTypeConfig]:\n\"\"\"The Python class that holds the (optional) configuration for a data type instance.\"\"\"\n        return KiaraModelTypeConfig  # type: ignore\n\n    def serialize(self, data: KiaraModelList) -&gt; Union[str, SerializedData]:\n\n        if self.type_config.kiara_model_id is None:\n            logger.debug(\n                \"ignore.serialize_request\",\n                data_type=\"kiara_model\",\n                cls=data.__class__.__name__,\n                reason=\"no model id in type config\",\n            )\n            return NO_SERIALIZATION_MARKER\n\n        _data = {\n            \"data\": {\n                \"type\": \"inline-json\",\n                \"inline_data\": [x.dict() for x in data.list_items],  # type: ignore\n                \"codec\": \"json\",\n            },\n        }\n\n        _data = {}\n        for idx, x in enumerate(data.list_items):\n            _data[f\"item_{idx}\"] = {\n                \"type\": \"inline-json\",\n                \"inline_data\": x.dict(),\n                \"codec\": \"json\",\n            }\n\n        serialized_data = {\n            \"data_type\": self.data_type_name,\n            \"data_type_config\": self.type_config.dict(),\n            \"data\": _data,\n            \"serialization_profile\": \"json\",\n            \"metadata\": {\n                \"environment\": {},\n                \"deserialize\": {\n                    \"python_object\": {\n                        \"module_type\": \"load.kiara_model_list\",\n                        \"module_config\": {\n                            \"value_type\": \"kiara_model_list\",\n                            \"target_profile\": \"python_object\",\n                            \"serialization_profile\": \"json\",\n                        },\n                    }\n                },\n            },\n        }\n        from kiara.models.values.value import SerializationResult\n\n        serialized = SerializationResult(**serialized_data)\n        return serialized\n\n    @classmethod\n    def python_class(cls) -&gt; Type[KiaraModelList]:\n        return KiaraModelList\n\n    @lru_cache(maxsize=1)\n    def get_model_cls(self) -&gt; Type[KiaraModel]:\n\n        model_type_id = self.type_config.kiara_model_id\n        assert model_type_id is not None\n\n        model_registry = ModelRegistry.instance()\n\n        model_cls = model_registry.get_model_cls(\n            model_type_id, required_subclass=KiaraModel\n        )\n\n        return model_cls\n\n    def parse_python_obj(self, data: Any) -&gt; KiaraModelList[KiaraModel]:\n\n        if isinstance(data, KiaraModelList):\n            return data\n        elif not isinstance(data, list):\n            data = [data]\n            # raise KiaraException(msg=f\"Can't instantiate model of type '{self.type_config.kiara_model_id}' with data of type '{type(data)}': expected list.\")\n\n        result: List[KiaraModel] = []\n        for item in data:\n            if isinstance(item, KiaraModel):\n                result.append(item)\n            elif isinstance(item, Mapping):\n                model_instance = self.get_model_cls()(**item)\n                result.append(model_instance)\n            else:\n                _data = {DEFAULT_MODEL_KEY: item}\n                try:\n                    model_instance = self.get_model_cls()(**_data)\n                    result.append(model_instance)\n                except Exception as e:\n                    raise KiaraException(\n                        msg=f\"Can't instantiate model of type '{self.type_config.kiara_model_id}' with data of type '{type(item)}': {e}\"\n                    )\n\n        instance: KiaraModelList[KiaraModel] = KiaraModelList[self.get_model_cls()].construct(  # type: ignore\n            list_items=result, kiara_model_id=self.type_config.kiara_model_id\n        )\n        return instance\n\n    def _validate(self, value: Any) -&gt; None:\n\n        if not isinstance(value, KiaraModelList):\n            raise Exception(f\"Invalid type: {type(value)}.\")\n\n        for item in value.list_items:\n            if not isinstance(item, KiaraModel):\n                raise Exception(f\"Invalid type: {type(item)}.\")\n            if item._kiara_model_id != self.type_config.kiara_model_id:  # type: ignore\n                raise Exception(\n                    f\"Invalid model type '{item._kiara_model_id}': expected '{self.type_config.kiara_model_id}'.\"  # type: ignore\n                )\n\n    def _pretty_print_as__terminal_renderable(\n        self, value: \"Value\", render_config: Mapping[str, Any]\n    ):\n        json_str = value.data.json(option=orjson.OPT_INDENT_2)\n        return Syntax(json_str, \"json\", background_color=\"default\")\n</code></pre>"},{"location":"reference/kiara_plugin/core_types/data_types/models/#kiara_plugin.core_types.data_types.models.KiaraModelListType-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/core_types/data_types/models/#kiara_plugin.core_types.data_types.models.KiaraModelListType.data_type_config_class","title":"<code>data_type_config_class() -&gt; Type[KiaraModelTypeConfig]</code>  <code>classmethod</code>","text":"<p>The Python class that holds the (optional) configuration for a data type instance.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/core_types/data_types/models.py</code> <pre><code>@classmethod\ndef data_type_config_class(cls) -&gt; Type[KiaraModelTypeConfig]:\n\"\"\"The Python class that holds the (optional) configuration for a data type instance.\"\"\"\n    return KiaraModelTypeConfig  # type: ignore\n</code></pre>"},{"location":"reference/kiara_plugin/core_types/data_types/models/#kiara_plugin.core_types.data_types.models.KiaraModelListType.serialize","title":"<code>serialize(data: KiaraModelList) -&gt; Union[str, SerializedData]</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/core_types/data_types/models.py</code> <pre><code>def serialize(self, data: KiaraModelList) -&gt; Union[str, SerializedData]:\n\n    if self.type_config.kiara_model_id is None:\n        logger.debug(\n            \"ignore.serialize_request\",\n            data_type=\"kiara_model\",\n            cls=data.__class__.__name__,\n            reason=\"no model id in type config\",\n        )\n        return NO_SERIALIZATION_MARKER\n\n    _data = {\n        \"data\": {\n            \"type\": \"inline-json\",\n            \"inline_data\": [x.dict() for x in data.list_items],  # type: ignore\n            \"codec\": \"json\",\n        },\n    }\n\n    _data = {}\n    for idx, x in enumerate(data.list_items):\n        _data[f\"item_{idx}\"] = {\n            \"type\": \"inline-json\",\n            \"inline_data\": x.dict(),\n            \"codec\": \"json\",\n        }\n\n    serialized_data = {\n        \"data_type\": self.data_type_name,\n        \"data_type_config\": self.type_config.dict(),\n        \"data\": _data,\n        \"serialization_profile\": \"json\",\n        \"metadata\": {\n            \"environment\": {},\n            \"deserialize\": {\n                \"python_object\": {\n                    \"module_type\": \"load.kiara_model_list\",\n                    \"module_config\": {\n                        \"value_type\": \"kiara_model_list\",\n                        \"target_profile\": \"python_object\",\n                        \"serialization_profile\": \"json\",\n                    },\n                }\n            },\n        },\n    }\n    from kiara.models.values.value import SerializationResult\n\n    serialized = SerializationResult(**serialized_data)\n    return serialized\n</code></pre>"},{"location":"reference/kiara_plugin/core_types/data_types/models/#kiara_plugin.core_types.data_types.models.KiaraModelListType.python_class","title":"<code>python_class() -&gt; Type[KiaraModelList]</code>  <code>classmethod</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/core_types/data_types/models.py</code> <pre><code>@classmethod\ndef python_class(cls) -&gt; Type[KiaraModelList]:\n    return KiaraModelList\n</code></pre>"},{"location":"reference/kiara_plugin/core_types/data_types/models/#kiara_plugin.core_types.data_types.models.KiaraModelListType.get_model_cls","title":"<code>get_model_cls() -&gt; Type[KiaraModel]</code>  <code>cached</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/core_types/data_types/models.py</code> <pre><code>@lru_cache(maxsize=1)\ndef get_model_cls(self) -&gt; Type[KiaraModel]:\n\n    model_type_id = self.type_config.kiara_model_id\n    assert model_type_id is not None\n\n    model_registry = ModelRegistry.instance()\n\n    model_cls = model_registry.get_model_cls(\n        model_type_id, required_subclass=KiaraModel\n    )\n\n    return model_cls\n</code></pre>"},{"location":"reference/kiara_plugin/core_types/data_types/models/#kiara_plugin.core_types.data_types.models.KiaraModelListType.parse_python_obj","title":"<code>parse_python_obj(data: Any) -&gt; KiaraModelList[KiaraModel]</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/core_types/data_types/models.py</code> <pre><code>def parse_python_obj(self, data: Any) -&gt; KiaraModelList[KiaraModel]:\n\n    if isinstance(data, KiaraModelList):\n        return data\n    elif not isinstance(data, list):\n        data = [data]\n        # raise KiaraException(msg=f\"Can't instantiate model of type '{self.type_config.kiara_model_id}' with data of type '{type(data)}': expected list.\")\n\n    result: List[KiaraModel] = []\n    for item in data:\n        if isinstance(item, KiaraModel):\n            result.append(item)\n        elif isinstance(item, Mapping):\n            model_instance = self.get_model_cls()(**item)\n            result.append(model_instance)\n        else:\n            _data = {DEFAULT_MODEL_KEY: item}\n            try:\n                model_instance = self.get_model_cls()(**_data)\n                result.append(model_instance)\n            except Exception as e:\n                raise KiaraException(\n                    msg=f\"Can't instantiate model of type '{self.type_config.kiara_model_id}' with data of type '{type(item)}': {e}\"\n                )\n\n    instance: KiaraModelList[KiaraModel] = KiaraModelList[self.get_model_cls()].construct(  # type: ignore\n        list_items=result, kiara_model_id=self.type_config.kiara_model_id\n    )\n    return instance\n</code></pre>"},{"location":"reference/kiara_plugin/core_types/modules/__init__/","title":"modules","text":""},{"location":"reference/kiara_plugin/core_types/modules/__init__/#kiara_plugin.core_types.modules-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/core_types/modules/__init__/#kiara_plugin.core_types.modules.log","title":"<code>log = structlog.getLogger()</code>  <code>module-attribute</code>","text":""},{"location":"reference/kiara_plugin/core_types/modules/__init__/#kiara_plugin.core_types.modules.KIARA_INPUTS_CONFIG","title":"<code>KIARA_INPUTS_CONFIG = TypeVar('KIARA_INPUTS_CONFIG', bound=KiaraInputsConfig)</code>  <code>module-attribute</code>","text":""},{"location":"reference/kiara_plugin/core_types/modules/__init__/#kiara_plugin.core_types.modules-classes","title":"Classes","text":""},{"location":"reference/kiara_plugin/core_types/modules/__init__/#kiara_plugin.core_types.modules.KiaraInputsConfig","title":"<code>KiaraInputsConfig</code>","text":"<p>         Bases: <code>KiaraModuleConfig</code></p> <p>Base configuration that helps translating module config options into user input schemas.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/core_types/modules/__init__.py</code> <pre><code>class KiaraInputsConfig(KiaraModuleConfig):\n\"\"\"Base configuration that helps translating module config options into user input schemas.\"\"\"\n\n    add_inputs: bool = Field(\n        description=\"If set to 'True', parse options will be available as inputs.\",\n        default=True,\n    )\n    input_fields: List[str] = Field(\n        description=\"If not empty, only add the fields specified in here to the module inputs schema.\",\n        default_factory=list,\n    )\n\n    def augment_inputs_schema(\n        self, inputs_schema: Mapping[str, Union[Mapping[str, Any], ValueSchema]]\n    ) -&gt; Mapping[str, Union[Mapping[str, Any], ValueSchema]]:\n\n        if not self.add_inputs:\n            return inputs_schema\n\n        result: Dict[str, Any] = dict(inputs_schema)\n        field: ModelField\n        for field_name, field in self.__fields__.items():\n\n            if self.input_fields and field_name not in self.input_fields:\n                continue\n\n            if field_name in inputs_schema.keys() or field_name in [\n                \"constants\",\n                \"defaults\",\n                \"add_inputs\",\n                \"input_fields\",\n            ]:\n                log.debug(\n                    \"ignore.autoadd_input_field\",\n                    field_name=field_name,\n                    reason=\"field with that name already exists.\",\n                )\n                continue\n\n            kiara_type: Union[None, str] = None\n\n            if field.shape == SHAPE_LIST:\n                kiara_type = \"list\"\n            elif field.shape == SHAPE_DICT:\n                kiara_type = \"dict\"\n            elif field.type_ == str:\n                kiara_type = \"string\"\n            elif field.type_ == bool:\n                kiara_type = \"boolean\"\n            elif field.type_ == int:\n                kiara_type = \"integer\"\n            elif field.type_ == float:\n                kiara_type = \"float\"\n            elif issubclass(field.type_, Mapping):\n                kiara_type = \"dict\"\n            elif issubclass(field.type_, List):\n                kiara_type = \"list\"\n\n            if kiara_type is None:\n                raise Exception(\n                    f\"Can't auto-generate inputs schema, type '{field.type_}' for field '{field_name}' not supported.\"\n                )\n\n            result[field_name] = {\n                \"type\": kiara_type,\n                \"doc\": field.field_info.description,\n                \"optional\": not field.required,\n            }\n            if field.default:\n                result[field_name][\"default\"] = field.default\n            elif field.default_factory:\n                result[field_name][\"default\"] = field.default_factory()\n\n        return result\n</code></pre>"},{"location":"reference/kiara_plugin/core_types/modules/__init__/#kiara_plugin.core_types.modules.KiaraInputsConfig-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/core_types/modules/__init__/#kiara_plugin.core_types.modules.KiaraInputsConfig.add_inputs","title":"<code>add_inputs: bool = Field(description=\"If set to 'True', parse options will be available as inputs.\", default=True)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/core_types/modules/__init__/#kiara_plugin.core_types.modules.KiaraInputsConfig.input_fields","title":"<code>input_fields: List[str] = Field(description='If not empty, only add the fields specified in here to the module inputs schema.', default_factory=list)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/core_types/modules/__init__/#kiara_plugin.core_types.modules.KiaraInputsConfig-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/core_types/modules/__init__/#kiara_plugin.core_types.modules.KiaraInputsConfig.augment_inputs_schema","title":"<code>augment_inputs_schema(inputs_schema: Mapping[str, Union[Mapping[str, Any], ValueSchema]]) -&gt; Mapping[str, Union[Mapping[str, Any], ValueSchema]]</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/core_types/modules/__init__.py</code> <pre><code>def augment_inputs_schema(\n    self, inputs_schema: Mapping[str, Union[Mapping[str, Any], ValueSchema]]\n) -&gt; Mapping[str, Union[Mapping[str, Any], ValueSchema]]:\n\n    if not self.add_inputs:\n        return inputs_schema\n\n    result: Dict[str, Any] = dict(inputs_schema)\n    field: ModelField\n    for field_name, field in self.__fields__.items():\n\n        if self.input_fields and field_name not in self.input_fields:\n            continue\n\n        if field_name in inputs_schema.keys() or field_name in [\n            \"constants\",\n            \"defaults\",\n            \"add_inputs\",\n            \"input_fields\",\n        ]:\n            log.debug(\n                \"ignore.autoadd_input_field\",\n                field_name=field_name,\n                reason=\"field with that name already exists.\",\n            )\n            continue\n\n        kiara_type: Union[None, str] = None\n\n        if field.shape == SHAPE_LIST:\n            kiara_type = \"list\"\n        elif field.shape == SHAPE_DICT:\n            kiara_type = \"dict\"\n        elif field.type_ == str:\n            kiara_type = \"string\"\n        elif field.type_ == bool:\n            kiara_type = \"boolean\"\n        elif field.type_ == int:\n            kiara_type = \"integer\"\n        elif field.type_ == float:\n            kiara_type = \"float\"\n        elif issubclass(field.type_, Mapping):\n            kiara_type = \"dict\"\n        elif issubclass(field.type_, List):\n            kiara_type = \"list\"\n\n        if kiara_type is None:\n            raise Exception(\n                f\"Can't auto-generate inputs schema, type '{field.type_}' for field '{field_name}' not supported.\"\n            )\n\n        result[field_name] = {\n            \"type\": kiara_type,\n            \"doc\": field.field_info.description,\n            \"optional\": not field.required,\n        }\n        if field.default:\n            result[field_name][\"default\"] = field.default\n        elif field.default_factory:\n            result[field_name][\"default\"] = field.default_factory()\n\n    return result\n</code></pre>"},{"location":"reference/kiara_plugin/core_types/modules/__init__/#kiara_plugin.core_types.modules.AutoInputsKiaraModule","title":"<code>AutoInputsKiaraModule</code>","text":"<p>         Bases: <code>KiaraModule</code></p> <p>Base class for kiara modules that want to expose module configuration via user inputs.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/core_types/modules/__init__.py</code> <pre><code>class AutoInputsKiaraModule(KiaraModule):\n\"\"\"Base class for kiara modules that want to expose module configuration via user inputs.\"\"\"\n\n    _config_cls: Type[KIARA_INPUTS_CONFIG] = KiaraInputsConfig  # type: ignore\n    _is_abstract = True\n\n    def _create_inputs_schema(self) -&gt; None:\n\"\"\"Assemble the inputs schema and assign it to the approriate instance attributes.\"\"\"\n\n        try:\n            _input_schemas_data = self.create_inputs_schema()\n            _input_schemas_data = self.config.augment_inputs_schema(\n                inputs_schema=_input_schemas_data\n            )\n\n            if _input_schemas_data is None:\n                raise Exception(\n                    f\"Invalid inputs implementation for '{self.alias}': no inputs schema\"\n                )\n\n            if not _input_schemas_data and not self._allow_empty_inputs:\n                raise Exception(\n                    f\"Invalid inputs implementation for '{self.alias}': empty inputs schema\"\n                )\n            try:\n                _input_schemas = create_schema_dict(schema_config=_input_schemas_data)\n            except Exception as e:\n                raise Exception(f\"Can't create input schemas for '{self.alias}': {e}\")\n\n            defaults = self._config.defaults\n            constants = self._config.constants\n\n            for k, v in defaults.items():\n                if k not in _input_schemas.keys():\n                    raise Exception(\n                        f\"Can't create inputs for '{self.alias}', invalid default field name '{k}'. Available field names: '{', '.join(_input_schemas.keys())}'\"  # type: ignore\n                    )\n\n            for k, v in constants.items():\n                if k not in _input_schemas.keys():\n                    raise Exception(\n                        f\"Can't create inputs for '{self.alias}', invalid constant field name '{k}'. Available field names: '{', '.join(_input_schemas.keys())}'\"  # type: ignore\n                    )\n\n            self._inputs_schema, self._constants = overlay_constants_and_defaults(\n                _input_schemas, defaults=defaults, constants=constants\n            )\n\n        except Exception as e:\n            raise Exception(f\"Can't create input schemas for instance '{self.alias}': {e}\")  # type: ignore\n\n    def get_data_for_field(self, field_name: str, inputs: ValueMap) -&gt; Any:\n\"\"\"Convenience method to quickly access data for a config or input field, depending on the module configuration.\"\"\"\n\n        if not self.config.add_inputs:\n            return self.get_config_value(field_name)\n\n        if self.config.input_fields and field_name not in self.config.input_fields:\n            return self.get_config_value(field_name)\n\n        return inputs.get_value_data(field_name=field_name)\n</code></pre>"},{"location":"reference/kiara_plugin/core_types/modules/__init__/#kiara_plugin.core_types.modules.AutoInputsKiaraModule-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/core_types/modules/__init__/#kiara_plugin.core_types.modules.AutoInputsKiaraModule._config_cls","title":"<code>_config_cls: Type[KIARA_INPUTS_CONFIG] = KiaraInputsConfig</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/core_types/modules/__init__/#kiara_plugin.core_types.modules.AutoInputsKiaraModule-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/core_types/modules/__init__/#kiara_plugin.core_types.modules.AutoInputsKiaraModule.get_data_for_field","title":"<code>get_data_for_field(field_name: str, inputs: ValueMap) -&gt; Any</code>","text":"<p>Convenience method to quickly access data for a config or input field, depending on the module configuration.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/core_types/modules/__init__.py</code> <pre><code>def get_data_for_field(self, field_name: str, inputs: ValueMap) -&gt; Any:\n\"\"\"Convenience method to quickly access data for a config or input field, depending on the module configuration.\"\"\"\n\n    if not self.config.add_inputs:\n        return self.get_config_value(field_name)\n\n    if self.config.input_fields and field_name not in self.config.input_fields:\n        return self.get_config_value(field_name)\n\n    return inputs.get_value_data(field_name=field_name)\n</code></pre>"},{"location":"reference/kiara_plugin/core_types/modules/boolean/","title":"boolean","text":""},{"location":"reference/kiara_plugin/core_types/modules/boolean/#kiara_plugin.core_types.modules.boolean-classes","title":"Classes","text":""},{"location":"reference/kiara_plugin/core_types/modules/boolean/#kiara_plugin.core_types.modules.boolean.LogicProcessingModuleConfig","title":"<code>LogicProcessingModuleConfig</code>","text":"<p>         Bases: <code>KiaraModuleConfig</code></p> <p>Config class for all the 'logic'-related modules.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/core_types/modules/boolean.py</code> <pre><code>class LogicProcessingModuleConfig(KiaraModuleConfig):\n\"\"\"Config class for all the 'logic'-related modules.\"\"\"\n\n    # this is used to simulate longer running jobs\n    delay: float = Field(\n        default=0,\n        description=\"the delay in seconds from processing start to when the output is returned.\",\n    )\n</code></pre>"},{"location":"reference/kiara_plugin/core_types/modules/boolean/#kiara_plugin.core_types.modules.boolean.LogicProcessingModuleConfig-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/core_types/modules/boolean/#kiara_plugin.core_types.modules.boolean.LogicProcessingModuleConfig.delay","title":"<code>delay: float = Field(default=0, description='the delay in seconds from processing start to when the output is returned.')</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/core_types/modules/boolean/#kiara_plugin.core_types.modules.boolean.LogicProcessingModule","title":"<code>LogicProcessingModule</code>","text":"<p>         Bases: <code>KiaraModule</code></p> <p>Base class for logic-related kiara modules.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/core_types/modules/boolean.py</code> <pre><code>class LogicProcessingModule(KiaraModule):\n\"\"\"Base class for logic-related kiara modules.\"\"\"\n\n    _config_cls = LogicProcessingModuleConfig\n    _is_abstract = True\n</code></pre>"},{"location":"reference/kiara_plugin/core_types/modules/boolean/#kiara_plugin.core_types.modules.boolean.LogicProcessingModule-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/core_types/modules/boolean/#kiara_plugin.core_types.modules.boolean.LogicProcessingModule._config_cls","title":"<code>_config_cls = LogicProcessingModuleConfig</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/core_types/modules/boolean/#kiara_plugin.core_types.modules.boolean.NotModule","title":"<code>NotModule</code>","text":"<p>         Bases: <code>LogicProcessingModule</code></p> <p>Negates the input.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/core_types/modules/boolean.py</code> <pre><code>class NotModule(LogicProcessingModule):\n\"\"\"Negates the input.\"\"\"\n\n    _module_type_name = \"logic.not\"\n\n    def create_inputs_schema(\n        self,\n    ) -&gt; ValueMapSchema:\n\"\"\"The not module only has one input, a boolean that will be negated by the module.\"\"\"\n\n        return {\n            \"a\": {\"type\": \"boolean\", \"doc\": \"A boolean describing this input state.\"}\n        }\n\n    def create_outputs_schema(\n        self,\n    ) -&gt; ValueMapSchema:\n\"\"\"The output of this module is a single boolean, the negated input.\"\"\"\n\n        return {\n            \"y\": {\n                \"type\": \"boolean\",\n                \"doc\": \"A boolean describing the module output state.\",\n            }\n        }\n\n    def process(self, inputs: ValueMap, outputs: ValueMap) -&gt; None:\n\"\"\"Negates the input boolean.\"\"\"\n\n        time.sleep(self.config.get(\"delay\"))  # type: ignore\n\n        outputs.set_value(\"y\", not inputs.get_value_data(\"a\"))\n</code></pre>"},{"location":"reference/kiara_plugin/core_types/modules/boolean/#kiara_plugin.core_types.modules.boolean.NotModule-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/core_types/modules/boolean/#kiara_plugin.core_types.modules.boolean.NotModule.create_inputs_schema","title":"<code>create_inputs_schema() -&gt; ValueMapSchema</code>","text":"<p>The not module only has one input, a boolean that will be negated by the module.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/core_types/modules/boolean.py</code> <pre><code>def create_inputs_schema(\n    self,\n) -&gt; ValueMapSchema:\n\"\"\"The not module only has one input, a boolean that will be negated by the module.\"\"\"\n\n    return {\n        \"a\": {\"type\": \"boolean\", \"doc\": \"A boolean describing this input state.\"}\n    }\n</code></pre>"},{"location":"reference/kiara_plugin/core_types/modules/boolean/#kiara_plugin.core_types.modules.boolean.NotModule.create_outputs_schema","title":"<code>create_outputs_schema() -&gt; ValueMapSchema</code>","text":"<p>The output of this module is a single boolean, the negated input.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/core_types/modules/boolean.py</code> <pre><code>def create_outputs_schema(\n    self,\n) -&gt; ValueMapSchema:\n\"\"\"The output of this module is a single boolean, the negated input.\"\"\"\n\n    return {\n        \"y\": {\n            \"type\": \"boolean\",\n            \"doc\": \"A boolean describing the module output state.\",\n        }\n    }\n</code></pre>"},{"location":"reference/kiara_plugin/core_types/modules/boolean/#kiara_plugin.core_types.modules.boolean.NotModule.process","title":"<code>process(inputs: ValueMap, outputs: ValueMap) -&gt; None</code>","text":"<p>Negates the input boolean.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/core_types/modules/boolean.py</code> <pre><code>def process(self, inputs: ValueMap, outputs: ValueMap) -&gt; None:\n\"\"\"Negates the input boolean.\"\"\"\n\n    time.sleep(self.config.get(\"delay\"))  # type: ignore\n\n    outputs.set_value(\"y\", not inputs.get_value_data(\"a\"))\n</code></pre>"},{"location":"reference/kiara_plugin/core_types/modules/boolean/#kiara_plugin.core_types.modules.boolean.AndModule","title":"<code>AndModule</code>","text":"<p>         Bases: <code>LogicProcessingModule</code></p> <p>Returns 'True' if both inputs are 'True'.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/core_types/modules/boolean.py</code> <pre><code>class AndModule(LogicProcessingModule):\n\"\"\"Returns 'True' if both inputs are 'True'.\"\"\"\n\n    _module_type_name = \"logic.and\"\n\n    def create_inputs_schema(\n        self,\n    ) -&gt; ValueMapSchema:\n        return {\n            \"a\": {\"type\": \"boolean\", \"doc\": \"A boolean describing this input state.\"},\n            \"b\": {\"type\": \"boolean\", \"doc\": \"A boolean describing this input state.\"},\n        }\n\n    def create_outputs_schema(\n        self,\n    ) -&gt; ValueMapSchema:\n        return {\n            \"y\": {\n                \"type\": \"boolean\",\n                \"doc\": \"A boolean describing the module output state.\",\n            }\n        }\n\n    def process(self, inputs: ValueMap, outputs: ValueMap) -&gt; None:\n\n        time.sleep(self.config.delay)  # type: ignore\n\n        outputs.set_value(\n            \"y\", inputs.get_value_data(\"a\") and inputs.get_value_data(\"b\")\n        )\n</code></pre>"},{"location":"reference/kiara_plugin/core_types/modules/boolean/#kiara_plugin.core_types.modules.boolean.AndModule-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/core_types/modules/boolean/#kiara_plugin.core_types.modules.boolean.AndModule.create_inputs_schema","title":"<code>create_inputs_schema() -&gt; ValueMapSchema</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/core_types/modules/boolean.py</code> <pre><code>def create_inputs_schema(\n    self,\n) -&gt; ValueMapSchema:\n    return {\n        \"a\": {\"type\": \"boolean\", \"doc\": \"A boolean describing this input state.\"},\n        \"b\": {\"type\": \"boolean\", \"doc\": \"A boolean describing this input state.\"},\n    }\n</code></pre>"},{"location":"reference/kiara_plugin/core_types/modules/boolean/#kiara_plugin.core_types.modules.boolean.AndModule.create_outputs_schema","title":"<code>create_outputs_schema() -&gt; ValueMapSchema</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/core_types/modules/boolean.py</code> <pre><code>def create_outputs_schema(\n    self,\n) -&gt; ValueMapSchema:\n    return {\n        \"y\": {\n            \"type\": \"boolean\",\n            \"doc\": \"A boolean describing the module output state.\",\n        }\n    }\n</code></pre>"},{"location":"reference/kiara_plugin/core_types/modules/boolean/#kiara_plugin.core_types.modules.boolean.AndModule.process","title":"<code>process(inputs: ValueMap, outputs: ValueMap) -&gt; None</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/core_types/modules/boolean.py</code> <pre><code>def process(self, inputs: ValueMap, outputs: ValueMap) -&gt; None:\n\n    time.sleep(self.config.delay)  # type: ignore\n\n    outputs.set_value(\n        \"y\", inputs.get_value_data(\"a\") and inputs.get_value_data(\"b\")\n    )\n</code></pre>"},{"location":"reference/kiara_plugin/core_types/modules/boolean/#kiara_plugin.core_types.modules.boolean.OrModule","title":"<code>OrModule</code>","text":"<p>         Bases: <code>LogicProcessingModule</code></p> <p>Returns 'True' if one of the inputs is 'True'.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/core_types/modules/boolean.py</code> <pre><code>class OrModule(LogicProcessingModule):\n\"\"\"Returns 'True' if one of the inputs is 'True'.\"\"\"\n\n    _module_type_name = \"logic.or\"\n\n    def create_inputs_schema(\n        self,\n    ) -&gt; ValueMapSchema:\n\n        return {\n            \"a\": {\"type\": \"boolean\", \"doc\": \"A boolean describing this input state.\"},\n            \"b\": {\"type\": \"boolean\", \"doc\": \"A boolean describing this input state.\"},\n        }\n\n    def create_outputs_schema(\n        self,\n    ) -&gt; ValueMapSchema:\n\n        return {\n            \"y\": {\n                \"type\": \"boolean\",\n                \"doc\": \"A boolean describing the module output state.\",\n            }\n        }\n\n    def process(self, inputs: ValueMap, outputs: ValueMap) -&gt; None:\n\n        time.sleep(self.config.get(\"delay\"))  # type: ignore\n        outputs.set_value(\"y\", inputs.get_value_data(\"a\") or inputs.get_value_data(\"b\"))\n</code></pre>"},{"location":"reference/kiara_plugin/core_types/modules/boolean/#kiara_plugin.core_types.modules.boolean.OrModule-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/core_types/modules/boolean/#kiara_plugin.core_types.modules.boolean.OrModule.create_inputs_schema","title":"<code>create_inputs_schema() -&gt; ValueMapSchema</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/core_types/modules/boolean.py</code> <pre><code>def create_inputs_schema(\n    self,\n) -&gt; ValueMapSchema:\n\n    return {\n        \"a\": {\"type\": \"boolean\", \"doc\": \"A boolean describing this input state.\"},\n        \"b\": {\"type\": \"boolean\", \"doc\": \"A boolean describing this input state.\"},\n    }\n</code></pre>"},{"location":"reference/kiara_plugin/core_types/modules/boolean/#kiara_plugin.core_types.modules.boolean.OrModule.create_outputs_schema","title":"<code>create_outputs_schema() -&gt; ValueMapSchema</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/core_types/modules/boolean.py</code> <pre><code>def create_outputs_schema(\n    self,\n) -&gt; ValueMapSchema:\n\n    return {\n        \"y\": {\n            \"type\": \"boolean\",\n            \"doc\": \"A boolean describing the module output state.\",\n        }\n    }\n</code></pre>"},{"location":"reference/kiara_plugin/core_types/modules/boolean/#kiara_plugin.core_types.modules.boolean.OrModule.process","title":"<code>process(inputs: ValueMap, outputs: ValueMap) -&gt; None</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/core_types/modules/boolean.py</code> <pre><code>def process(self, inputs: ValueMap, outputs: ValueMap) -&gt; None:\n\n    time.sleep(self.config.get(\"delay\"))  # type: ignore\n    outputs.set_value(\"y\", inputs.get_value_data(\"a\") or inputs.get_value_data(\"b\"))\n</code></pre>"},{"location":"reference/kiara_plugin/core_types/modules/date/","title":"date","text":""},{"location":"reference/kiara_plugin/core_types/modules/date/#kiara_plugin.core_types.modules.date-classes","title":"Classes","text":""},{"location":"reference/kiara_plugin/core_types/modules/date/#kiara_plugin.core_types.modules.date.ExtractDateModule","title":"<code>ExtractDateModule</code>","text":"<p>         Bases: <code>KiaraModule</code></p> <p>Extract a date object from a string.</p> <p>This module is very bare bones so far, only using the standard parser from the dateutil package to parse strings into dates.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/core_types/modules/date.py</code> <pre><code>class ExtractDateModule(KiaraModule):\n\"\"\"Extract a date object from a string.\n\n    This module is very bare bones so far, only using the standard parser from the\n    [dateutil](https://github.com/dateutil/dateutil) package to parse strings into dates.\n    \"\"\"\n\n    _module_type_name = \"date.extract_from_string\"\n\n    def create_inputs_schema(\n        self,\n    ) -&gt; ValueMapSchema:\n\n        return {\"text\": {\"type\": \"string\", \"doc\": \"The input string.\"}}\n\n    def create_outputs_schema(\n        self,\n    ) -&gt; ValueMapSchema:\n\n        return {\n            \"date\": {\"type\": \"date\", \"doc\": \"The date extracted from the input string.\"}\n        }\n\n    def process(self, inputs: ValueMap, outputs: ValueMap) -&gt; None:\n\n        from dateutil import parser\n\n        text = inputs.get_value_data(\"text\")\n        # date_match = re.findall(r\"_(\\d{4}-\\d{2}-\\d{2})_\", text)\n        # assert date_match\n        # d_obj = parser.parse(date_match[0])  # type: ignore\n        d_obj = parser.parse(text, fuzzy=True)\n\n        outputs.set_value(\"date\", d_obj)\n</code></pre>"},{"location":"reference/kiara_plugin/core_types/modules/date/#kiara_plugin.core_types.modules.date.ExtractDateModule-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/core_types/modules/date/#kiara_plugin.core_types.modules.date.ExtractDateModule.create_inputs_schema","title":"<code>create_inputs_schema() -&gt; ValueMapSchema</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/core_types/modules/date.py</code> <pre><code>def create_inputs_schema(\n    self,\n) -&gt; ValueMapSchema:\n\n    return {\"text\": {\"type\": \"string\", \"doc\": \"The input string.\"}}\n</code></pre>"},{"location":"reference/kiara_plugin/core_types/modules/date/#kiara_plugin.core_types.modules.date.ExtractDateModule.create_outputs_schema","title":"<code>create_outputs_schema() -&gt; ValueMapSchema</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/core_types/modules/date.py</code> <pre><code>def create_outputs_schema(\n    self,\n) -&gt; ValueMapSchema:\n\n    return {\n        \"date\": {\"type\": \"date\", \"doc\": \"The date extracted from the input string.\"}\n    }\n</code></pre>"},{"location":"reference/kiara_plugin/core_types/modules/date/#kiara_plugin.core_types.modules.date.ExtractDateModule.process","title":"<code>process(inputs: ValueMap, outputs: ValueMap) -&gt; None</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/core_types/modules/date.py</code> <pre><code>def process(self, inputs: ValueMap, outputs: ValueMap) -&gt; None:\n\n    from dateutil import parser\n\n    text = inputs.get_value_data(\"text\")\n    # date_match = re.findall(r\"_(\\d{4}-\\d{2}-\\d{2})_\", text)\n    # assert date_match\n    # d_obj = parser.parse(date_match[0])  # type: ignore\n    d_obj = parser.parse(text, fuzzy=True)\n\n    outputs.set_value(\"date\", d_obj)\n</code></pre>"},{"location":"reference/kiara_plugin/core_types/modules/date/#kiara_plugin.core_types.modules.date.DateRangeCheckModule","title":"<code>DateRangeCheckModule</code>","text":"<p>         Bases: <code>KiaraModule</code></p> <p>Check whether a date falls within a specified date range.</p> <p>If none one of the inputs 'earliest' or 'latest' is set, this module will always return 'True'.</p> <p>Return <code>True</code> if that's the case, otherwise <code>False</code>.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/core_types/modules/date.py</code> <pre><code>class DateRangeCheckModule(KiaraModule):\n\"\"\"Check whether a date falls within a specified date range.\n\n    If none one of the inputs 'earliest' or 'latest' is set, this module will always return 'True'.\n\n    Return ``True`` if that's the case, otherwise ``False``.\n    \"\"\"\n\n    _module_type_name = \"date.check_range\"\n\n    def create_inputs_schema(\n        self,\n    ) -&gt; ValueMapSchema:\n\n        inputs: Dict[str, Dict[str, Any]] = {\n            \"date\": {\"type\": \"date\", \"doc\": \"The date to check.\"},\n            \"earliest\": {\n                \"type\": \"date\",\n                \"doc\": \"The earliest date that is allowed.\",\n                \"optional\": True,\n            },\n            \"latest\": {\n                \"type\": \"date\",\n                \"doc\": \"The latest date that is allowed.\",\n                \"optional\": True,\n            },\n        }\n\n        return inputs\n\n    def create_outputs_schema(\n        self,\n    ) -&gt; ValueMapSchema:\n\n        outputs = {\n            \"within_range\": {\n                \"type\": \"boolean\",\n                \"doc\": \"A boolean indicating whether the provided date was within the allowed range ('true'), or not ('false')\",\n            }\n        }\n        return outputs\n\n    def process(self, inputs: ValueMap, outputs: ValueMap) -&gt; None:\n\n        d: datetime.datetime = inputs.get_value_data(\"date\")\n        earliest: Union[datetime.datetime, None] = inputs.get_value_data(\"earliest\")\n        latest: Union[datetime.datetime, None] = inputs.get_value_data(\"latest\")\n\n        if not earliest and not latest:\n            outputs.set_value(\"within_range\", True)\n            return\n\n        if not isinstance(d, datetime.datetime):\n            raise KiaraProcessingException(f\"Invalid format for input date: {type(d)}\")\n\n        if earliest and latest:\n            matches = earliest &lt;= d &lt;= latest\n        elif earliest:\n            matches = earliest &lt;= d\n        else:\n            matches = d &lt;= latest  # type: ignore\n\n        outputs.set_value(\"within_range\", matches)\n</code></pre>"},{"location":"reference/kiara_plugin/core_types/modules/date/#kiara_plugin.core_types.modules.date.DateRangeCheckModule-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/core_types/modules/date/#kiara_plugin.core_types.modules.date.DateRangeCheckModule.create_inputs_schema","title":"<code>create_inputs_schema() -&gt; ValueMapSchema</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/core_types/modules/date.py</code> <pre><code>def create_inputs_schema(\n    self,\n) -&gt; ValueMapSchema:\n\n    inputs: Dict[str, Dict[str, Any]] = {\n        \"date\": {\"type\": \"date\", \"doc\": \"The date to check.\"},\n        \"earliest\": {\n            \"type\": \"date\",\n            \"doc\": \"The earliest date that is allowed.\",\n            \"optional\": True,\n        },\n        \"latest\": {\n            \"type\": \"date\",\n            \"doc\": \"The latest date that is allowed.\",\n            \"optional\": True,\n        },\n    }\n\n    return inputs\n</code></pre>"},{"location":"reference/kiara_plugin/core_types/modules/date/#kiara_plugin.core_types.modules.date.DateRangeCheckModule.create_outputs_schema","title":"<code>create_outputs_schema() -&gt; ValueMapSchema</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/core_types/modules/date.py</code> <pre><code>def create_outputs_schema(\n    self,\n) -&gt; ValueMapSchema:\n\n    outputs = {\n        \"within_range\": {\n            \"type\": \"boolean\",\n            \"doc\": \"A boolean indicating whether the provided date was within the allowed range ('true'), or not ('false')\",\n        }\n    }\n    return outputs\n</code></pre>"},{"location":"reference/kiara_plugin/core_types/modules/date/#kiara_plugin.core_types.modules.date.DateRangeCheckModule.process","title":"<code>process(inputs: ValueMap, outputs: ValueMap) -&gt; None</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/core_types/modules/date.py</code> <pre><code>def process(self, inputs: ValueMap, outputs: ValueMap) -&gt; None:\n\n    d: datetime.datetime = inputs.get_value_data(\"date\")\n    earliest: Union[datetime.datetime, None] = inputs.get_value_data(\"earliest\")\n    latest: Union[datetime.datetime, None] = inputs.get_value_data(\"latest\")\n\n    if not earliest and not latest:\n        outputs.set_value(\"within_range\", True)\n        return\n\n    if not isinstance(d, datetime.datetime):\n        raise KiaraProcessingException(f\"Invalid format for input date: {type(d)}\")\n\n    if earliest and latest:\n        matches = earliest &lt;= d &lt;= latest\n    elif earliest:\n        matches = earliest &lt;= d\n    else:\n        matches = d &lt;= latest  # type: ignore\n\n    outputs.set_value(\"within_range\", matches)\n</code></pre>"},{"location":"reference/kiara_plugin/core_types/modules/list/","title":"list","text":""},{"location":"reference/kiara_plugin/core_types/modules/list/#kiara_plugin.core_types.modules.list-classes","title":"Classes","text":""},{"location":"reference/kiara_plugin/core_types/modules/list/#kiara_plugin.core_types.modules.list.IncludedInListCheckModule","title":"<code>IncludedInListCheckModule</code>","text":"<p>         Bases: <code>KiaraModule</code></p> <p>Check whether an element is in a list.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/core_types/modules/list.py</code> <pre><code>class IncludedInListCheckModule(KiaraModule):\n\"\"\"Check whether an element is in a list.\"\"\"\n\n    _module_type_name = \"list.contains\"\n\n    def create_inputs_schema(\n        self,\n    ) -&gt; ValueMapSchema:\n\n        inputs = {\n            \"list\": {\"type\": \"list\", \"doc\": \"The list.\"},\n            \"item\": {\n                \"type\": \"any\",\n                \"doc\": \"The element to check for inclusion in the list.\",\n            },\n        }\n        return inputs\n\n    def create_outputs_schema(\n        self,\n    ) -&gt; ValueMapSchema:\n\n        outputs = {\n            \"is_included\": {\n                \"type\": \"boolean\",\n                \"doc\": \"Whether the element is in the list, or not.\",\n            }\n        }\n        return outputs\n\n    def process(self, inputs: ValueMap, outputs: ValueMap) -&gt; None:\n\n        item_list = inputs.get_value_data(\"list\")\n        item = inputs.get_value_data(\"item\")\n\n        outputs.set_value(\"is_included\", item in item_list)\n</code></pre>"},{"location":"reference/kiara_plugin/core_types/modules/list/#kiara_plugin.core_types.modules.list.IncludedInListCheckModule-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/core_types/modules/list/#kiara_plugin.core_types.modules.list.IncludedInListCheckModule.create_inputs_schema","title":"<code>create_inputs_schema() -&gt; ValueMapSchema</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/core_types/modules/list.py</code> <pre><code>def create_inputs_schema(\n    self,\n) -&gt; ValueMapSchema:\n\n    inputs = {\n        \"list\": {\"type\": \"list\", \"doc\": \"The list.\"},\n        \"item\": {\n            \"type\": \"any\",\n            \"doc\": \"The element to check for inclusion in the list.\",\n        },\n    }\n    return inputs\n</code></pre>"},{"location":"reference/kiara_plugin/core_types/modules/list/#kiara_plugin.core_types.modules.list.IncludedInListCheckModule.create_outputs_schema","title":"<code>create_outputs_schema() -&gt; ValueMapSchema</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/core_types/modules/list.py</code> <pre><code>def create_outputs_schema(\n    self,\n) -&gt; ValueMapSchema:\n\n    outputs = {\n        \"is_included\": {\n            \"type\": \"boolean\",\n            \"doc\": \"Whether the element is in the list, or not.\",\n        }\n    }\n    return outputs\n</code></pre>"},{"location":"reference/kiara_plugin/core_types/modules/list/#kiara_plugin.core_types.modules.list.IncludedInListCheckModule.process","title":"<code>process(inputs: ValueMap, outputs: ValueMap) -&gt; None</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/core_types/modules/list.py</code> <pre><code>def process(self, inputs: ValueMap, outputs: ValueMap) -&gt; None:\n\n    item_list = inputs.get_value_data(\"list\")\n    item = inputs.get_value_data(\"item\")\n\n    outputs.set_value(\"is_included\", item in item_list)\n</code></pre>"},{"location":"reference/kiara_plugin/core_types/modules/models/","title":"models","text":""},{"location":"reference/kiara_plugin/core_types/modules/models/#kiara_plugin.core_types.modules.models-classes","title":"Classes","text":""},{"location":"reference/kiara_plugin/core_types/modules/models/#kiara_plugin.core_types.modules.models.LoadKiaraModel","title":"<code>LoadKiaraModel</code>","text":"<p>         Bases: <code>DeserializeValueModule</code></p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/core_types/modules/models.py</code> <pre><code>class LoadKiaraModel(DeserializeValueModule):\n\n    _module_type_name = \"load.kiara_model\"\n\n    @classmethod\n    def retrieve_supported_target_profiles(cls) -&gt; Mapping[str, Type]:\n        return {\"python_object\": KiaraModel}\n\n    @classmethod\n    def retrieve_supported_serialization_profile(cls) -&gt; str:\n        return \"json\"\n\n    @classmethod\n    def retrieve_serialized_value_type(cls) -&gt; str:\n        return \"kiara_model\"\n\n    def to__python_object(self, data: SerializedData, **config: Any) -&gt; KiaraModel:\n\n        chunks = data.get_serialized_data(\"data\")\n        assert chunks.get_number_of_chunks() == 1\n        _chunks = list(chunks.get_chunks(as_files=False))\n        assert len(_chunks) == 1\n\n        bytes_string: bytes = _chunks[0]  # type: ignore\n        model_data = orjson.loads(bytes_string)\n\n        model_id: str = data.data_type_config[\"kiara_model_id\"]\n        model_registry = ModelRegistry.instance()\n        m_cls = model_registry.get_model_cls(kiara_model_id=model_id)\n\n        obj = m_cls(**model_data)\n        return obj\n</code></pre>"},{"location":"reference/kiara_plugin/core_types/modules/models/#kiara_plugin.core_types.modules.models.LoadKiaraModel-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/core_types/modules/models/#kiara_plugin.core_types.modules.models.LoadKiaraModel.retrieve_supported_target_profiles","title":"<code>retrieve_supported_target_profiles() -&gt; Mapping[str, Type]</code>  <code>classmethod</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/core_types/modules/models.py</code> <pre><code>@classmethod\ndef retrieve_supported_target_profiles(cls) -&gt; Mapping[str, Type]:\n    return {\"python_object\": KiaraModel}\n</code></pre>"},{"location":"reference/kiara_plugin/core_types/modules/models/#kiara_plugin.core_types.modules.models.LoadKiaraModel.retrieve_supported_serialization_profile","title":"<code>retrieve_supported_serialization_profile() -&gt; str</code>  <code>classmethod</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/core_types/modules/models.py</code> <pre><code>@classmethod\ndef retrieve_supported_serialization_profile(cls) -&gt; str:\n    return \"json\"\n</code></pre>"},{"location":"reference/kiara_plugin/core_types/modules/models/#kiara_plugin.core_types.modules.models.LoadKiaraModel.retrieve_serialized_value_type","title":"<code>retrieve_serialized_value_type() -&gt; str</code>  <code>classmethod</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/core_types/modules/models.py</code> <pre><code>@classmethod\ndef retrieve_serialized_value_type(cls) -&gt; str:\n    return \"kiara_model\"\n</code></pre>"},{"location":"reference/kiara_plugin/core_types/modules/models/#kiara_plugin.core_types.modules.models.LoadKiaraModel.to__python_object","title":"<code>to__python_object(data: SerializedData, **config: Any) -&gt; KiaraModel</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/core_types/modules/models.py</code> <pre><code>def to__python_object(self, data: SerializedData, **config: Any) -&gt; KiaraModel:\n\n    chunks = data.get_serialized_data(\"data\")\n    assert chunks.get_number_of_chunks() == 1\n    _chunks = list(chunks.get_chunks(as_files=False))\n    assert len(_chunks) == 1\n\n    bytes_string: bytes = _chunks[0]  # type: ignore\n    model_data = orjson.loads(bytes_string)\n\n    model_id: str = data.data_type_config[\"kiara_model_id\"]\n    model_registry = ModelRegistry.instance()\n    m_cls = model_registry.get_model_cls(kiara_model_id=model_id)\n\n    obj = m_cls(**model_data)\n    return obj\n</code></pre>"},{"location":"reference/kiara_plugin/core_types/modules/models/#kiara_plugin.core_types.modules.models.LoadKiaraModelList","title":"<code>LoadKiaraModelList</code>","text":"<p>         Bases: <code>DeserializeValueModule</code></p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/core_types/modules/models.py</code> <pre><code>class LoadKiaraModelList(DeserializeValueModule):\n\n    _module_type_name = \"load.kiara_model_list\"\n\n    @classmethod\n    def retrieve_supported_target_profiles(cls) -&gt; Mapping[str, Type]:\n        return {\"python_object\": KiaraModelList}\n\n    @classmethod\n    def retrieve_supported_serialization_profile(cls) -&gt; str:\n        return \"json\"\n\n    @classmethod\n    def retrieve_serialized_value_type(cls) -&gt; str:\n        return \"kiara_model_list\"\n\n    def to__python_object(self, data: SerializedData, **config: Any) -&gt; KiaraModelList:\n\n        model_id: str = data.data_type_config[\"kiara_model_id\"]\n        model_registry = ModelRegistry.instance()\n        m_cls = model_registry.get_model_cls(kiara_model_id=model_id)\n\n        items = []\n\n        for chunk_id in sorted(data.get_keys()):\n            chunks = data.get_serialized_data(chunk_id)\n            assert chunks.get_number_of_chunks() == 1\n\n            _chunks = list(chunks.get_chunks(as_files=False))\n            assert len(_chunks) == 1\n\n            bytes_string: bytes = _chunks[0]  # type: ignore\n            model_data = orjson.loads(bytes_string)\n\n            _obj = m_cls(**model_data)\n            items.append(_obj)\n\n        obj: KiaraModelList[KiaraModel] = KiaraModelList(\n            list_items=items, kiara_model_id=model_id\n        )\n        return obj\n</code></pre>"},{"location":"reference/kiara_plugin/core_types/modules/models/#kiara_plugin.core_types.modules.models.LoadKiaraModelList-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/core_types/modules/models/#kiara_plugin.core_types.modules.models.LoadKiaraModelList.retrieve_supported_target_profiles","title":"<code>retrieve_supported_target_profiles() -&gt; Mapping[str, Type]</code>  <code>classmethod</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/core_types/modules/models.py</code> <pre><code>@classmethod\ndef retrieve_supported_target_profiles(cls) -&gt; Mapping[str, Type]:\n    return {\"python_object\": KiaraModelList}\n</code></pre>"},{"location":"reference/kiara_plugin/core_types/modules/models/#kiara_plugin.core_types.modules.models.LoadKiaraModelList.retrieve_supported_serialization_profile","title":"<code>retrieve_supported_serialization_profile() -&gt; str</code>  <code>classmethod</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/core_types/modules/models.py</code> <pre><code>@classmethod\ndef retrieve_supported_serialization_profile(cls) -&gt; str:\n    return \"json\"\n</code></pre>"},{"location":"reference/kiara_plugin/core_types/modules/models/#kiara_plugin.core_types.modules.models.LoadKiaraModelList.retrieve_serialized_value_type","title":"<code>retrieve_serialized_value_type() -&gt; str</code>  <code>classmethod</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/core_types/modules/models.py</code> <pre><code>@classmethod\ndef retrieve_serialized_value_type(cls) -&gt; str:\n    return \"kiara_model_list\"\n</code></pre>"},{"location":"reference/kiara_plugin/core_types/modules/models/#kiara_plugin.core_types.modules.models.LoadKiaraModelList.to__python_object","title":"<code>to__python_object(data: SerializedData, **config: Any) -&gt; KiaraModelList</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/core_types/modules/models.py</code> <pre><code>def to__python_object(self, data: SerializedData, **config: Any) -&gt; KiaraModelList:\n\n    model_id: str = data.data_type_config[\"kiara_model_id\"]\n    model_registry = ModelRegistry.instance()\n    m_cls = model_registry.get_model_cls(kiara_model_id=model_id)\n\n    items = []\n\n    for chunk_id in sorted(data.get_keys()):\n        chunks = data.get_serialized_data(chunk_id)\n        assert chunks.get_number_of_chunks() == 1\n\n        _chunks = list(chunks.get_chunks(as_files=False))\n        assert len(_chunks) == 1\n\n        bytes_string: bytes = _chunks[0]  # type: ignore\n        model_data = orjson.loads(bytes_string)\n\n        _obj = m_cls(**model_data)\n        items.append(_obj)\n\n    obj: KiaraModelList[KiaraModel] = KiaraModelList(\n        list_items=items, kiara_model_id=model_id\n    )\n    return obj\n</code></pre>"},{"location":"reference/kiara_plugin/core_types/modules/string/","title":"string","text":""},{"location":"reference/kiara_plugin/core_types/modules/string/#kiara_plugin.core_types.modules.string-classes","title":"Classes","text":""},{"location":"reference/kiara_plugin/core_types/modules/string/#kiara_plugin.core_types.modules.string.StringFiltersModule","title":"<code>StringFiltersModule</code>","text":"<p>         Bases: <code>FilterModule</code></p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/core_types/modules/string.py</code> <pre><code>class StringFiltersModule(FilterModule):\n\n    _module_type_name = \"string.filters\"\n\n    @classmethod\n    def retrieve_supported_type(cls) -&gt; Union[Dict[str, Any], str]:\n\n        return \"string\"\n\n    def create_filter_inputs(self, filter_name: str) -&gt; Union[None, ValueMapSchema]:\n\n        if filter_name == \"tokens\":\n            return {\n                \"filter_tokens\": {\n                    \"type\": \"list\",\n                    \"doc\": \"A list of tokens to filter out.\",\n                    \"optional\": True,\n                },\n                \"replacement\": {\n                    \"type\": \"string\",\n                    \"doc\": \"The string to replace the tokens with.\",\n                    \"default\": \"\",\n                },\n            }\n\n        return None\n\n    def filter__tokens(self, value: Value, filter_inputs: Mapping[str, Any]):\n\n        tokens = filter_inputs.get(\"filter_tokens\", None)\n        if not tokens:\n            return None\n\n        repl = filter_inputs.get(\"replacement\")\n\n        result: str = value.data\n        for token in tokens:\n            result = result.replace(token, repl)  # type: ignore\n\n        return result\n</code></pre>"},{"location":"reference/kiara_plugin/core_types/modules/string/#kiara_plugin.core_types.modules.string.StringFiltersModule-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/core_types/modules/string/#kiara_plugin.core_types.modules.string.StringFiltersModule.retrieve_supported_type","title":"<code>retrieve_supported_type() -&gt; Union[Dict[str, Any], str]</code>  <code>classmethod</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/core_types/modules/string.py</code> <pre><code>@classmethod\ndef retrieve_supported_type(cls) -&gt; Union[Dict[str, Any], str]:\n\n    return \"string\"\n</code></pre>"},{"location":"reference/kiara_plugin/core_types/modules/string/#kiara_plugin.core_types.modules.string.StringFiltersModule.create_filter_inputs","title":"<code>create_filter_inputs(filter_name: str) -&gt; Union[None, ValueMapSchema]</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/core_types/modules/string.py</code> <pre><code>def create_filter_inputs(self, filter_name: str) -&gt; Union[None, ValueMapSchema]:\n\n    if filter_name == \"tokens\":\n        return {\n            \"filter_tokens\": {\n                \"type\": \"list\",\n                \"doc\": \"A list of tokens to filter out.\",\n                \"optional\": True,\n            },\n            \"replacement\": {\n                \"type\": \"string\",\n                \"doc\": \"The string to replace the tokens with.\",\n                \"default\": \"\",\n            },\n        }\n\n    return None\n</code></pre>"},{"location":"reference/kiara_plugin/core_types/modules/string/#kiara_plugin.core_types.modules.string.StringFiltersModule.filter__tokens","title":"<code>filter__tokens(value: Value, filter_inputs: Mapping[str, Any])</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/core_types/modules/string.py</code> <pre><code>def filter__tokens(self, value: Value, filter_inputs: Mapping[str, Any]):\n\n    tokens = filter_inputs.get(\"filter_tokens\", None)\n    if not tokens:\n        return None\n\n    repl = filter_inputs.get(\"replacement\")\n\n    result: str = value.data\n    for token in tokens:\n        result = result.replace(token, repl)  # type: ignore\n\n    return result\n</code></pre>"},{"location":"reference/kiara_plugin/core_types/modules/string/#kiara_plugin.core_types.modules.string.RegexModuleConfig","title":"<code>RegexModuleConfig</code>","text":"<p>         Bases: <code>KiaraModuleConfig</code></p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/core_types/modules/string.py</code> <pre><code>class RegexModuleConfig(KiaraModuleConfig):\n\n    regex: str = Field(description=\"The regex to apply.\")\n    only_first_match: bool = Field(\n        description=\"Whether to only return the first match, or all matches.\",\n        default=False,\n    )\n</code></pre>"},{"location":"reference/kiara_plugin/core_types/modules/string/#kiara_plugin.core_types.modules.string.RegexModuleConfig-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/core_types/modules/string/#kiara_plugin.core_types.modules.string.RegexModuleConfig.regex","title":"<code>regex: str = Field(description='The regex to apply.')</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/core_types/modules/string/#kiara_plugin.core_types.modules.string.RegexModuleConfig.only_first_match","title":"<code>only_first_match: bool = Field(description='Whether to only return the first match, or all matches.', default=False)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/core_types/modules/string/#kiara_plugin.core_types.modules.string.RegexModule","title":"<code>RegexModule</code>","text":"<p>         Bases: <code>KiaraModule</code></p> <p>Match a string using a regular expression.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/core_types/modules/string.py</code> <pre><code>class RegexModule(KiaraModule):\n\"\"\"Match a string using a regular expression.\"\"\"\n\n    _config_cls = RegexModuleConfig\n    _module_type_name = \"string.match_regex\"\n\n    def create_inputs_schema(\n        self,\n    ) -&gt; ValueMapSchema:\n        return {\"text\": {\"type\": \"string\", \"doc\": \"The text to match.\"}}\n\n    def create_outputs_schema(\n        self,\n    ) -&gt; ValueMapSchema:\n\n        if self.get_config_value(\"only_first_match\"):\n            output_schema = {\"text\": {\"type\": \"string\", \"doc\": \"The first match.\"}}\n        else:\n            raise NotImplementedError()\n\n        return output_schema\n\n    def process(self, inputs: ValueMap, outputs: ValueMap) -&gt; None:\n\n        text = inputs.get_value_data(\"text\")\n        regex = self.get_config_value(\"regex\")\n        matches = re.findall(regex, text)\n\n        if not matches:\n            raise KiaraProcessingException(f\"No match for regex: {regex}\")\n\n        if self.get_config_value(\"only_first_match\"):\n            result = matches[0]\n        else:\n            result = matches\n\n        outputs.set_value(\"text\", result)\n</code></pre>"},{"location":"reference/kiara_plugin/core_types/modules/string/#kiara_plugin.core_types.modules.string.RegexModule-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/core_types/modules/string/#kiara_plugin.core_types.modules.string.RegexModule._config_cls","title":"<code>_config_cls = RegexModuleConfig</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/core_types/modules/string/#kiara_plugin.core_types.modules.string.RegexModule-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/core_types/modules/string/#kiara_plugin.core_types.modules.string.RegexModule.create_inputs_schema","title":"<code>create_inputs_schema() -&gt; ValueMapSchema</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/core_types/modules/string.py</code> <pre><code>def create_inputs_schema(\n    self,\n) -&gt; ValueMapSchema:\n    return {\"text\": {\"type\": \"string\", \"doc\": \"The text to match.\"}}\n</code></pre>"},{"location":"reference/kiara_plugin/core_types/modules/string/#kiara_plugin.core_types.modules.string.RegexModule.create_outputs_schema","title":"<code>create_outputs_schema() -&gt; ValueMapSchema</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/core_types/modules/string.py</code> <pre><code>def create_outputs_schema(\n    self,\n) -&gt; ValueMapSchema:\n\n    if self.get_config_value(\"only_first_match\"):\n        output_schema = {\"text\": {\"type\": \"string\", \"doc\": \"The first match.\"}}\n    else:\n        raise NotImplementedError()\n\n    return output_schema\n</code></pre>"},{"location":"reference/kiara_plugin/core_types/modules/string/#kiara_plugin.core_types.modules.string.RegexModule.process","title":"<code>process(inputs: ValueMap, outputs: ValueMap) -&gt; None</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/core_types/modules/string.py</code> <pre><code>def process(self, inputs: ValueMap, outputs: ValueMap) -&gt; None:\n\n    text = inputs.get_value_data(\"text\")\n    regex = self.get_config_value(\"regex\")\n    matches = re.findall(regex, text)\n\n    if not matches:\n        raise KiaraProcessingException(f\"No match for regex: {regex}\")\n\n    if self.get_config_value(\"only_first_match\"):\n        result = matches[0]\n    else:\n        result = matches\n\n    outputs.set_value(\"text\", result)\n</code></pre>"},{"location":"reference/kiara_plugin/core_types/modules/string/#kiara_plugin.core_types.modules.string.ReplaceModuleConfig","title":"<code>ReplaceModuleConfig</code>","text":"<p>         Bases: <code>KiaraModuleConfig</code></p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/core_types/modules/string.py</code> <pre><code>class ReplaceModuleConfig(KiaraModuleConfig):\n\n    replacement_map: Dict[str, str] = Field(\n        description=\"A map, containing the strings to be replaced as keys, and the replacements as values.\"\n    )\n    default_value: Union[str, None] = Field(\n        description=\"The default value to use if the string to be replaced is not in the replacement map. By default, this just returns the string itself.\",\n        default=None,\n    )\n</code></pre>"},{"location":"reference/kiara_plugin/core_types/modules/string/#kiara_plugin.core_types.modules.string.ReplaceModuleConfig-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/core_types/modules/string/#kiara_plugin.core_types.modules.string.ReplaceModuleConfig.replacement_map","title":"<code>replacement_map: Dict[str, str] = Field(description='A map, containing the strings to be replaced as keys, and the replacements as values.')</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/core_types/modules/string/#kiara_plugin.core_types.modules.string.ReplaceModuleConfig.default_value","title":"<code>default_value: Union[str, None] = Field(description='The default value to use if the string to be replaced is not in the replacement map. By default, this just returns the string itself.', default=None)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/core_types/modules/string/#kiara_plugin.core_types.modules.string.ReplaceStringModule","title":"<code>ReplaceStringModule</code>","text":"<p>         Bases: <code>KiaraModule</code></p> <p>Replace a string if it matches a key in a mapping dictionary.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/core_types/modules/string.py</code> <pre><code>class ReplaceStringModule(KiaraModule):\n\"\"\"Replace a string if it matches a key in a mapping dictionary.\"\"\"\n\n    _config_cls = ReplaceModuleConfig\n    _module_type_name = \"string.replace\"\n\n    def create_inputs_schema(\n        self,\n    ) -&gt; ValueMapSchema:\n\n        return {\"text\": {\"type\": \"string\", \"doc\": \"The input string.\"}}\n\n    def create_outputs_schema(\n        self,\n    ) -&gt; ValueMapSchema:\n        return {\"text\": {\"type\": \"string\", \"doc\": \"The replaced string.\"}}\n\n    def process(self, inputs: ValueMap, outputs: ValueMap) -&gt; None:\n\n        text = inputs.get_value_data(\"text\")\n        repl_map = self.get_config_value(\"replacement_map\")\n        default = self.get_config_value(\"default_value\")\n\n        if text not in repl_map.keys():\n            if default is None:\n                result = text\n            else:\n                result = default\n        else:\n            result = repl_map[text]\n\n        outputs.set_value(\"text\", result)\n</code></pre>"},{"location":"reference/kiara_plugin/core_types/modules/string/#kiara_plugin.core_types.modules.string.ReplaceStringModule-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/core_types/modules/string/#kiara_plugin.core_types.modules.string.ReplaceStringModule._config_cls","title":"<code>_config_cls = ReplaceModuleConfig</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/core_types/modules/string/#kiara_plugin.core_types.modules.string.ReplaceStringModule-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/core_types/modules/string/#kiara_plugin.core_types.modules.string.ReplaceStringModule.create_inputs_schema","title":"<code>create_inputs_schema() -&gt; ValueMapSchema</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/core_types/modules/string.py</code> <pre><code>def create_inputs_schema(\n    self,\n) -&gt; ValueMapSchema:\n\n    return {\"text\": {\"type\": \"string\", \"doc\": \"The input string.\"}}\n</code></pre>"},{"location":"reference/kiara_plugin/core_types/modules/string/#kiara_plugin.core_types.modules.string.ReplaceStringModule.create_outputs_schema","title":"<code>create_outputs_schema() -&gt; ValueMapSchema</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/core_types/modules/string.py</code> <pre><code>def create_outputs_schema(\n    self,\n) -&gt; ValueMapSchema:\n    return {\"text\": {\"type\": \"string\", \"doc\": \"The replaced string.\"}}\n</code></pre>"},{"location":"reference/kiara_plugin/core_types/modules/string/#kiara_plugin.core_types.modules.string.ReplaceStringModule.process","title":"<code>process(inputs: ValueMap, outputs: ValueMap) -&gt; None</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/core_types/modules/string.py</code> <pre><code>def process(self, inputs: ValueMap, outputs: ValueMap) -&gt; None:\n\n    text = inputs.get_value_data(\"text\")\n    repl_map = self.get_config_value(\"replacement_map\")\n    default = self.get_config_value(\"default_value\")\n\n    if text not in repl_map.keys():\n        if default is None:\n            result = text\n        else:\n            result = default\n    else:\n        result = repl_map[text]\n\n    outputs.set_value(\"text\", result)\n</code></pre>"},{"location":"reference/kiara_plugin/core_types/pipelines/__init__/","title":"pipelines","text":"<p>Default (empty) module that is used as a base path for pipelines contained in this package.</p>"},{"location":"reference/kiara_plugin/core_types/renderers/__init__/","title":"renderers","text":""},{"location":"reference/kiara_plugin/core_types/renderers/lineage/","title":"lineage","text":""},{"location":"reference/kiara_plugin/core_types/renderers/lineage/#kiara_plugin.core_types.renderers.lineage-classes","title":"Classes","text":""},{"location":"reference/kiara_plugin/core_types/renderers/lineage/#kiara_plugin.core_types.renderers.lineage.LineageDataInputs","title":"<code>LineageDataInputs</code>","text":"<p>         Bases: <code>RenderInputsSchema</code></p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/core_types/renderers/lineage.py</code> <pre><code>class LineageDataInputs(RenderInputsSchema):\n\n    render_style: str = Field(\n        description=\"The style to use for rendering the lineage graph.\",\n        default=\"json\",\n    )\n    config: Dict[str, Any] = Field(\n        description=\"Additional, optional configuration for the renderer.\",\n        default_factory=dict,\n    )\n\n    @root_validator(pre=True)\n    def validate_linage_inputs(cls, values):\n\n        result = {}\n        result[\"render_style\"] = values.pop(\"render_style\", \"json\")\n        config = values.pop(\"config\", {})\n        if config:\n            result[\"config\"] = config\n        else:\n            result[\"config\"] = values\n        return result\n</code></pre>"},{"location":"reference/kiara_plugin/core_types/renderers/lineage/#kiara_plugin.core_types.renderers.lineage.LineageDataInputs-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/core_types/renderers/lineage/#kiara_plugin.core_types.renderers.lineage.LineageDataInputs.render_style","title":"<code>render_style: str = Field(description='The style to use for rendering the lineage graph.', default='json')</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/core_types/renderers/lineage/#kiara_plugin.core_types.renderers.lineage.LineageDataInputs.config","title":"<code>config: Dict[str, Any] = Field(description='Additional, optional configuration for the renderer.', default_factory=dict)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/core_types/renderers/lineage/#kiara_plugin.core_types.renderers.lineage.LineageDataInputs-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/core_types/renderers/lineage/#kiara_plugin.core_types.renderers.lineage.LineageDataInputs.validate_linage_inputs","title":"<code>validate_linage_inputs(values)</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/core_types/renderers/lineage.py</code> <pre><code>@root_validator(pre=True)\ndef validate_linage_inputs(cls, values):\n\n    result = {}\n    result[\"render_style\"] = values.pop(\"render_style\", \"json\")\n    config = values.pop(\"config\", {})\n    if config:\n        result[\"config\"] = config\n    else:\n        result[\"config\"] = values\n    return result\n</code></pre>"},{"location":"reference/kiara_plugin/core_types/renderers/lineage/#kiara_plugin.core_types.renderers.lineage.LineageDataRendererConfig","title":"<code>LineageDataRendererConfig</code>","text":"<p>         Bases: <code>KiaraRendererConfig</code></p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/core_types/renderers/lineage.py</code> <pre><code>class LineageDataRendererConfig(KiaraRendererConfig):\n    pass\n</code></pre>"},{"location":"reference/kiara_plugin/core_types/renderers/lineage/#kiara_plugin.core_types.renderers.lineage.LineageTransformer","title":"<code>LineageTransformer</code>","text":"<p>         Bases: <code>SourceTransformer</code></p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/core_types/renderers/lineage.py</code> <pre><code>class LineageTransformer(SourceTransformer):\n    def __init__(self, kiara: Kiara):\n\n        self._kiara: Kiara = kiara\n        super().__init__()\n\n    def retrieve_supported_python_classes(self) -&gt; Iterable[Type]:\n\n        return [Value, ValueLineage, str, uuid.UUID]\n\n    def retrieve_supported_inputs_descs(self) -&gt; Union[str, Iterable[str]]:\n        return [\n            \"a value object\",\n            \"a value alias\",\n            \"a value id\",\n            \"a value lineeage object\",\n        ]\n\n    def validate_and_transform(self, source: Any) -&gt; Union[ValueLineage, None]:\n        if isinstance(source, ValueLineage):\n            return source\n        value = self._kiara.data_registry.get_value(source)\n        return value.lineage\n</code></pre>"},{"location":"reference/kiara_plugin/core_types/renderers/lineage/#kiara_plugin.core_types.renderers.lineage.LineageTransformer-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/core_types/renderers/lineage/#kiara_plugin.core_types.renderers.lineage.LineageTransformer.retrieve_supported_python_classes","title":"<code>retrieve_supported_python_classes() -&gt; Iterable[Type]</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/core_types/renderers/lineage.py</code> <pre><code>def retrieve_supported_python_classes(self) -&gt; Iterable[Type]:\n\n    return [Value, ValueLineage, str, uuid.UUID]\n</code></pre>"},{"location":"reference/kiara_plugin/core_types/renderers/lineage/#kiara_plugin.core_types.renderers.lineage.LineageTransformer.retrieve_supported_inputs_descs","title":"<code>retrieve_supported_inputs_descs() -&gt; Union[str, Iterable[str]]</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/core_types/renderers/lineage.py</code> <pre><code>def retrieve_supported_inputs_descs(self) -&gt; Union[str, Iterable[str]]:\n    return [\n        \"a value object\",\n        \"a value alias\",\n        \"a value id\",\n        \"a value lineeage object\",\n    ]\n</code></pre>"},{"location":"reference/kiara_plugin/core_types/renderers/lineage/#kiara_plugin.core_types.renderers.lineage.LineageTransformer.validate_and_transform","title":"<code>validate_and_transform(source: Any) -&gt; Union[ValueLineage, None]</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/core_types/renderers/lineage.py</code> <pre><code>def validate_and_transform(self, source: Any) -&gt; Union[ValueLineage, None]:\n    if isinstance(source, ValueLineage):\n        return source\n    value = self._kiara.data_registry.get_value(source)\n    return value.lineage\n</code></pre>"},{"location":"reference/kiara_plugin/core_types/renderers/lineage/#kiara_plugin.core_types.renderers.lineage.LineageRendererData","title":"<code>LineageRendererData</code>","text":"<p>         Bases: <code>KiaraRenderer[ValueLineage, LineageDataInputs, str, LineageDataRendererConfig]</code></p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/core_types/renderers/lineage.py</code> <pre><code>class LineageRendererData(\n    KiaraRenderer[ValueLineage, LineageDataInputs, str, LineageDataRendererConfig]\n):\n\n    _renderer_name = \"lineage_data\"\n    _renderer_config_cls = LineageDataRendererConfig  # type: ignore\n    _inputs_schema = LineageDataInputs  # type: ignore\n\n    def retrieve_doc(self) -&gt; Union[str, None]:\n\n        return \"Render a value lineage as data.\"\n\n    def retrieve_source_transformers(self) -&gt; Iterable[SourceTransformer]:\n        return [LineageTransformer(kiara=self._kiara)]\n\n    def retrieve_supported_render_sources(self) -&gt; str:\n        return \"value\"\n\n    def retrieve_supported_render_targets(self) -&gt; Union[Iterable[str], str]:\n        return \"lineage_data\"\n\n    def _render(self, instance: ValueLineage, render_config: LineageDataInputs) -&gt; str:\n\n        render_style = render_config.render_style\n        func_name = f\"render__{render_style}\"\n        if not hasattr(self, func_name):\n            details = \"Available styles:\\n\\n\"\n            for attr in dir(self):\n                if attr.startswith(\"render__\"):\n                    details += f\" - {attr.replace('render__', '')}\\n\"\n            raise KiaraException(\n                f\"Can't render lineage in requested style '{render_style}': style not available.\",\n                details=details,\n            )\n\n        func = getattr(self, func_name)\n        result = func(lineage=instance, **render_config.config)\n\n        return result\n\n    def render__json(self, lineage: ValueLineage, **config) -&gt; str:\n\"\"\"Renders a html tree view using ul/li elements in a recursive helper function.\n\n        There's a lot more we can do here, like replacing the value ids with aliases (if the values have one), or have a preview of the value whe hovering over it. This is really just the bare minimum.\n\n        \"\"\"\n\n        data = lineage.as_dict(**config)\n        return orjson_dumps(data, option=orjson.OPT_INDENT_2)\n\n    def render__yaml(self, lineage: ValueLineage, **config) -&gt; str:\n\"\"\"Renders a html tree view using ul/li elements in a recursive helper function.\n\n        There's a lot more we can do here, like replacing the value ids with aliases (if the values have one), or have a preview of the value whe hovering over it. This is really just the bare minimum.\n\n        \"\"\"\n\n        yaml = StringYAML()\n        data = lineage.as_dict(**config)\n        # we need to make sure there are no objects left...\n        data = orjson.loads(orjson_dumps(data))\n        result = yaml.dump(data)\n        return result\n</code></pre>"},{"location":"reference/kiara_plugin/core_types/renderers/lineage/#kiara_plugin.core_types.renderers.lineage.LineageRendererData-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/core_types/renderers/lineage/#kiara_plugin.core_types.renderers.lineage.LineageRendererData.retrieve_doc","title":"<code>retrieve_doc() -&gt; Union[str, None]</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/core_types/renderers/lineage.py</code> <pre><code>def retrieve_doc(self) -&gt; Union[str, None]:\n\n    return \"Render a value lineage as data.\"\n</code></pre>"},{"location":"reference/kiara_plugin/core_types/renderers/lineage/#kiara_plugin.core_types.renderers.lineage.LineageRendererData.retrieve_source_transformers","title":"<code>retrieve_source_transformers() -&gt; Iterable[SourceTransformer]</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/core_types/renderers/lineage.py</code> <pre><code>def retrieve_source_transformers(self) -&gt; Iterable[SourceTransformer]:\n    return [LineageTransformer(kiara=self._kiara)]\n</code></pre>"},{"location":"reference/kiara_plugin/core_types/renderers/lineage/#kiara_plugin.core_types.renderers.lineage.LineageRendererData.retrieve_supported_render_sources","title":"<code>retrieve_supported_render_sources() -&gt; str</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/core_types/renderers/lineage.py</code> <pre><code>def retrieve_supported_render_sources(self) -&gt; str:\n    return \"value\"\n</code></pre>"},{"location":"reference/kiara_plugin/core_types/renderers/lineage/#kiara_plugin.core_types.renderers.lineage.LineageRendererData.retrieve_supported_render_targets","title":"<code>retrieve_supported_render_targets() -&gt; Union[Iterable[str], str]</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/core_types/renderers/lineage.py</code> <pre><code>def retrieve_supported_render_targets(self) -&gt; Union[Iterable[str], str]:\n    return \"lineage_data\"\n</code></pre>"},{"location":"reference/kiara_plugin/core_types/renderers/lineage/#kiara_plugin.core_types.renderers.lineage.LineageRendererData.render__json","title":"<code>render__json(lineage: ValueLineage, **config: ValueLineage) -&gt; str</code>","text":"<p>Renders a html tree view using ul/li elements in a recursive helper function.</p> <p>There's a lot more we can do here, like replacing the value ids with aliases (if the values have one), or have a preview of the value whe hovering over it. This is really just the bare minimum.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/core_types/renderers/lineage.py</code> <pre><code>def render__json(self, lineage: ValueLineage, **config) -&gt; str:\n\"\"\"Renders a html tree view using ul/li elements in a recursive helper function.\n\n    There's a lot more we can do here, like replacing the value ids with aliases (if the values have one), or have a preview of the value whe hovering over it. This is really just the bare minimum.\n\n    \"\"\"\n\n    data = lineage.as_dict(**config)\n    return orjson_dumps(data, option=orjson.OPT_INDENT_2)\n</code></pre>"},{"location":"reference/kiara_plugin/core_types/renderers/lineage/#kiara_plugin.core_types.renderers.lineage.LineageRendererData.render__yaml","title":"<code>render__yaml(lineage: ValueLineage, **config: ValueLineage) -&gt; str</code>","text":"<p>Renders a html tree view using ul/li elements in a recursive helper function.</p> <p>There's a lot more we can do here, like replacing the value ids with aliases (if the values have one), or have a preview of the value whe hovering over it. This is really just the bare minimum.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/core_types/renderers/lineage.py</code> <pre><code>def render__yaml(self, lineage: ValueLineage, **config) -&gt; str:\n\"\"\"Renders a html tree view using ul/li elements in a recursive helper function.\n\n    There's a lot more we can do here, like replacing the value ids with aliases (if the values have one), or have a preview of the value whe hovering over it. This is really just the bare minimum.\n\n    \"\"\"\n\n    yaml = StringYAML()\n    data = lineage.as_dict(**config)\n    # we need to make sure there are no objects left...\n    data = orjson.loads(orjson_dumps(data))\n    result = yaml.dump(data)\n    return result\n</code></pre>"}]}